pathwayMatches <- merge(x=pathwayMatches, by.x="drugTargetSymbol", y=edges, by.y="to")
## select and rename columns
pathwayMatches <- unique(dplyr::select(pathwayMatches,nct_id, interventions.processed, "downstream"="drugTargetSymbol","upstream"="from" ))
## where an intervention targets >1 gene, aggregate
pathwayMatches <- as.data.frame(pathwayMatches %>%
group_by(nct_id, interventions.processed, upstream) %>%
summarise(
downstream = paste(unique(downstream), collapse = ", ")
))
## add rationale column
pathwayMatches$rationale <- paste0("Study drug (", pathwayMatches$interventions.processed, ") targets downstream gene(s) (", pathwayMatches$downstream, ")")
## drop intervention column
pathwayMatches <- unique(dplyr::select(pathwayMatches, -c(interventions.processed, downstream)))
## add a score
pathwayMatches$score <- 1
head(pathwayMatches,30)
names(targetMatches)
names(pathwayMatches)
rename(data=pathwayMatches, "drugTargetSymbol"="upstream")
rename(pathwayMatches, "drugTargetSymbol"="upstream")
## rename drugTargetSymbol column
targetMatches <- rename(targetMatches,"symbol"= "drugTargetSymbol")
## start with studies and their interventions
pathwayMatches <- unique(dplyr::select(cancerStudies, nct_id, interventions))
## join to drugs.targets on intervention name (verbatim)
pathwayMatches <- merge(x=pathwayMatches, by.x="interventions", y=drugs.targets, by.y="interventions.verbatim" )
## drop rows where drugTargetSymbol is NA
pathwayMatches <- pathwayMatches[!is.na(pathwayMatches$drugTargetSymbol), ]
## drop unnecessary columns
pathwayMatches <- unique(dplyr::select(pathwayMatches, nct_id, interventions.processed, drugTargetSymbol))
## join to edges, where drugTargetSymbol == to
## i.e. intervention targets the downstream node
pathwayMatches <- merge(x=pathwayMatches, by.x="drugTargetSymbol", y=edges, by.y="to")
## select and rename columns
pathwayMatches <- unique(dplyr::select(pathwayMatches,nct_id, interventions.processed, "downstream"="drugTargetSymbol","upstream"="from" ))
## where an intervention targets >1 gene, aggregate
pathwayMatches <- as.data.frame(pathwayMatches %>%
group_by(nct_id, interventions.processed, upstream) %>%
summarise(
downstream = paste(unique(downstream), collapse = ", ")
))
## add rationale column
pathwayMatches$rationale <- paste0("Study drug (", pathwayMatches$interventions.processed, ") targets downstream gene(s) (", pathwayMatches$downstream, ")")
## drop intervention column
pathwayMatches <- unique(dplyr::select(pathwayMatches, -c(interventions.processed, downstream)))
## rename upstream column to drugTargetSymbol to match targetMatches
pathwayMatches <- rename(pathwayMatches, "symbol"="upstream")
## add a score
pathwayMatches$score <- 1
head(targetMatches)
head(pathwayMatches)
head(indexed.eligibilities)
rmarkdown::render("trialMatchDataRefresh.Rmd")
head(indexed.eligibilities)
names(indexed.eligibilities)
eligibilityMatches <- unique(dplyr::select(indexed.eligibilities, nct_id,"gene"="controlled.match",criterion.type, feature ))
head(eligibilityMatches)
filter(eligibilityMatches, criterion.type=="EXCLUSION")
filter(indexed.eligibilities, criterion.type=="EXCLUSION")
filter(targetMatches, nct_id="NCT03184571")
head(targetMatches)
filter(targetMatches, nct_id=="NCT03184571")
filter(pathwayMatches, nct_id=="NCT03184571")
head(eligibilityMatches)
filter(eligibilityMatches, criterion.type=="INCLUSION")
eligibilityMatches <- filter(eligibilityMatches, criterion.type=="INCLUSION")
eligibilityMatches <- filter(eligibilityMatches, feature!="PRIOR_THERAPY")
head(eligibilityMatches)
names(targetMatches)
eligibilityMatches$rationale <- paste0("Inclusion criteria cite ", eligibilityMatches$gene, " ", eligibilityMatches$feature)
head(eligibilityMatches)
head(eligibilityMatches,40)
View(eligibilityMatches)
eligibilityMatches$rationale <- paste0("Enrolling subjects with ", eligibilityMatches$gene, " ", eligibilityMatches$feature)
eligibilityMatches$score <- 3
head(eligibilityMatches)
names(targetMatches)
eligibilityMatches <- unique(dplyr::select(eligibilityMatches, nct_id, "symbol"="gene", rationale, score))
head(eligibilityMatches)
head(evidence)
head(variants)
View(evidence)
names(evidence)
variantMatches <- unique(dplyr::select(evidence, variant_id, drugs, evidence_type, evidence_direction, clinical_significance))
head(variantMatches)
names(variants)
dplyr::select(variants, variant_id, gene, variant)
variantMatches <- merge(x=variantMatches, by.x="variant_id", y=dplyr::select(variants, variant_id, gene, variant), by.y="variant_id")
head(variantMatches)
evidence$drugs <- strsplit(x=evidence$drugs, split=",")
evidence <- unnest(data = evidence, cols = drugs, keep_empty = TRUE)
evidence <- as.data.frame(evidence) ## convert to data frame
## start with evidence data
variantMatches <- unique(dplyr::select(evidence, variant_id, drugs, evidence_type, evidence_direction, clinical_significance))
## join variant info
variantMatches <- merge(x=variantMatches, by.x="variant_id", y=dplyr::select(variants, variant_id, gene, variant), by.y="variant_id")
head(variantMatches)
unique(variantMatches$evidence_type)
variantMatches[!is.na(variantMatches$drugs), ]
variantMatches <- variantMatches[!is.na(variantMatches$drugs), ]
head(variantMatches)
unique(variantMatches$evidence_direction)
variantMatches[variantMatches$evidence_direction=="Supports", ]
variantMatches <- variantMatches[variantMatches$evidence_direction=="Supports", ]
names(variantMatches)
names(unique(dplyr::select(variantMatches, gene, variant, clinical_significance, drugs))
)
unique(dplyr::select(variantMatches, gene, variant, clinical_significance, drugs))
variantMatches <- unique(dplyr::select(variantMatches, gene, variant, clinical_significance, drugs))
head(variantMatches)
as.data.frame(variantMatches %>%
group_by(gene,variant, drugs) %>%
summarise(
clinical_significance = paste(unique(clinical_significance), collapse = ", ")
))
variantMatches <- as.data.frame(variantMatches %>%
group_by(gene,variant, drugs) %>%
summarise(
clinical_significance = paste(unique(clinical_significance), collapse = ", ")
))
head(variantMatches)
grep(pattern = ",", x=variantMatches$clinical_significance)
variantMatches[-grep(pattern = ",", x=variantMatches$clinical_significance), ]
variantMatches <- variantMatches[-grep(pattern = ",", x=variantMatches$clinical_significance), ]
head(variantMatches)
head(NCItPharmacologics)
names(cancerStudies)
unique(dplyr::select(cancerStudies, nct_id, interventions)
)
names(drugs)
names(drugs.targets)
unique(dplyr::select(drugs.targets, interventions.verbatim, interventions.processed))
names(cancerStudies)
View(variantMatches)
merge(x=variantMatches, by.x="drugs", y=unique(dplyr::select(drugs.targets, interventions.verbatim, interventions.processed), by.y="interventions.processed")
)
merge(x=variantMatches, by.x="drugs", y=unique(dplyr::select(drugs.targets, interventions.verbatim, interventions.processed)), by.y="interventions.processed")
variantMatches <- merge(x=variantMatches, by.x="drugs", y=unique(dplyr::select(drugs.targets, interventions.verbatim, interventions.processed)), by.y="interventions.processed")
variantMatches$rationale <- paste0("Variant predicts ", variantMatches$clinical_significance, " to study intervention (", variantMatches$drugs, ")")
head(variantMatches)
variantMatches$score <- ifelse(variantMatches$clinical_significance=="Sensitivity/Response", yes=3, no=ifelse(variantMatches$clinical_significance=="Resistance", yes = -3, no=0))
unique(variantMatches$score)
filter(variantMatches, score==0)
variantMatches$score <- ifelse(variantMatches$clinical_significance=="Sensitivity/Response", yes=3, no=-3)
names(variantMatches)
variantMatches$score <- merge(x=variantMatches, by.x="interventions.verbatim", y=unique(dplyr::select(cancerStudies, nct_id, interventions)), by.y="interventions")
merge(x=variantMatches,
by.x="interventions.verbatim",
y=unique(dplyr::select(cancerStudies, nct_id, interventions)),
by.y="interventions")
variantMatches <- merge(x=variantMatches,
by.x="interventions.verbatim",
y=unique(dplyr::select(cancerStudies, nct_id, interventions)),
by.y="interventions")
head(vvariantMatches)
head(variantMatches)
names(variantMatches)
names(targetMatches)
unique(paste(variantMatches$gene, variantMatches$variant, sep = " "))
variantMatches$gene_variant <- paste(variantMatches$gene, variantMatches$variant, sep = " ")
unique(dplyr::select(variantMatches, nct_id, "symbol"="gene_variant", rationale, score))
variantMatches <- unique(dplyr::select(variantMatches, nct_id, "symbol"="gene_variant", rationale, score))
variantMatches
## start with evidence data
variantMatches <- unique(dplyr::select(evidence, variant_id, drugs, evidence_type, evidence_direction, clinical_significance))
## join variant info
variantMatches <- merge(x=variantMatches, by.x="variant_id", y=dplyr::select(variants, variant_id, gene, variant), by.y="variant_id")
## drop rows where drugs == NA
variantMatches <- variantMatches[!is.na(variantMatches$drugs), ]
## drop rows where evidence_direction does not support
variantMatches <- variantMatches[variantMatches$evidence_direction=="Supports", ]
## drop unnecessary columns
variantMatches <- unique(dplyr::select(variantMatches, gene, variant, clinical_significance, drugs))
## if more than one interpretation for a gene-variant-drug combination, aggregate
variantMatches <- as.data.frame(variantMatches %>%
group_by(gene,variant, drugs) %>%
summarise(
clinical_significance = paste(unique(clinical_significance), collapse = ", ")
))
# drop those rows that have >1 interpretation (based on presence of comma)
variantMatches <- variantMatches[-grep(pattern = ",", x=variantMatches$clinical_significance), ]
## join to intervention names as per clinicaltrials.gov
variantMatches <- merge(x=variantMatches, by.x="drugs", y=unique(dplyr::select(drugs.targets, interventions.verbatim, interventions.processed)), by.y="interventions.processed")
variantMatches
head(variantMatches)
variantMatches$rationale <- paste0(variantMatches$gene, " ", variantMatches$variant, " predicts ", variantMatches$clinical_significance, " to study intervention (", variantMatches$drugs, ")")
head(variantMatches)
## add score column
variantMatches$score <- ifelse(variantMatches$clinical_significance=="Sensitivity/Response", yes=3, no=-3)
## join to cancerStudies
variantMatches <- merge(x=variantMatches,
by.x="interventions.verbatim",
y=unique(dplyr::select(cancerStudies, nct_id, interventions)),
by.y="interventions")
## create gene_variant values
variantMatches$gene_variant <- paste(variantMatches$gene, variantMatches$variant, sep = " ")
## select and rename columns to match targetMatches etc
variantMatches <- unique(dplyr::select(variantMatches, nct_id, "symbol"="gene_variant", rationale, score))
head(variantMatches)
rbind(eligibilityMatches, targetMatches, pathwayMatches, variantMatches)
scoredMatches <- rbind(eligibilityMatches, targetMatches, pathwayMatches, variantMatches)
as.data.frame(scoredMatches %>%
group_by(nct_id, symbol) %>%
summarise(
rationale = paste(unique(rationale), collapse = ", "),
score = sum(score)
))
scoredMatches <- as.data.frame(scoredMatches %>%
group_by(nct_id, symbol) %>%
summarise(
rationale = paste(unique(rationale), collapse = ", "),
score = sum(score)
))
View(scoredMatches)
## start with evidence data
variantMatches <- unique(dplyr::select(evidence, variant_id, drugs, evidence_type, evidence_direction, clinical_significance))
## join variant info
variantMatches <- merge(x=variantMatches, by.x="variant_id", y=dplyr::select(variants, variant_id, gene, variant), by.y="variant_id")
## drop rows where drugs == NA
variantMatches <- variantMatches[!is.na(variantMatches$drugs), ]
## drop rows where evidence_direction does not support
variantMatches <- variantMatches[variantMatches$evidence_direction=="Supports", ]
variantMatches <- unique(dplyr::select(variantMatches, gene, variant, clinical_significance, drugs))
head(variantMatches)
unique(variantMatches$variant)
grep(pattern = "mutation", x=variantMatches$variant, ignore.case = T)
variantMatches$variant[grep(pattern = "mutation", x=variantMatches$variant, ignore.case = T)] <- "mutation"
variantMatches$variant[grep(pattern = "amplification", x=variantMatches$variant, ignore.case = T)] <- "amplification"
variantMatches$variant[grep(pattern = "fusion", x=variantMatches$variant, ignore.case = T)] <- "fusion"
## if more than one interpretation for a gene-variant-drug combination, aggregate
variantMatches <- as.data.frame(variantMatches %>%
group_by(gene,variant, drugs) %>%
summarise(
clinical_significance = paste(unique(clinical_significance), collapse = ", ")
))
# drop those rows that have >1 interpretation (based on presence of comma)
variantMatches <- variantMatches[-grep(pattern = ",", x=variantMatches$clinical_significance), ]
## join to intervention names as per clinicaltrials.gov
variantMatches <- merge(x=variantMatches, by.x="drugs", y=unique(dplyr::select(drugs.targets, interventions.verbatim, interventions.processed)), by.y="interventions.processed")
## add rationale column
variantMatches$rationale <- paste0(variantMatches$gene, " ", variantMatches$variant, " predicts ", variantMatches$clinical_significance, " to study intervention (", variantMatches$drugs, ")")
## add score column
variantMatches$score <- ifelse(variantMatches$clinical_significance=="Sensitivity/Response", yes=3, no=-3)
## join to cancerStudies
variantMatches <- merge(x=variantMatches,
by.x="interventions.verbatim",
y=unique(dplyr::select(cancerStudies, nct_id, interventions)),
by.y="interventions")
## create gene_variant values
variantMatches$gene_variant <- paste(variantMatches$gene, variantMatches$variant, sep = " ")
## select and rename columns to match targetMatches etc
variantMatches <- unique(dplyr::select(variantMatches, nct_id, "symbol"="gene_variant", rationale, score))
scoredMatches <- rbind(eligibilityMatches, targetMatches, pathwayMatches, variantMatches)
## aggregate where mutliple lines of rationale per gene-study
scoredMatches <- as.data.frame(scoredMatches %>%
group_by(nct_id, symbol) %>%
summarise(
rationale = paste(unique(rationale), collapse = ", "),
score = sum(score)
))
scoredMatches <- rbind(eligibilityMatches, targetMatches, pathwayMatches)
## aggregate where mutliple lines of rationale per gene-study
scoredMatches <- as.data.frame(scoredMatches %>%
group_by(nct_id, symbol) %>%
summarise(
rationale = paste(unique(rationale), collapse = ", "),
score = sum(score)
))
View(eligibilityMatches)
rmarkdown::render("trialMatchDataRefresh.Rmd")
getwd()
rmarkdown::render("trialMatchDataRefresh.Rmd")
head(targetMatches)
head(pathwayMatches)
scoredMatches <- rbind(targetMatches, pathwayMatches)
## start with indexed eligibilities
eligibilityMatches <- unique(dplyr::select(indexed.eligibilities, nct_id,"gene"="controlled.match",criterion.type, feature ))
## filter out matches against exclusion criteria
eligibilityMatches <- filter(eligibilityMatches, criterion.type=="INCLUSION")
## filter out matches against prior therapy
eligibilityMatches <- filter(eligibilityMatches, feature!="PRIOR_THERAPY")
head(eligibilityMatches)
names(indexed.eligibilities)
head(indexed.eligibilities)
## start with indexed eligibilities
eligibilityMatches <- unique(dplyr::select(indexed.eligibilities, nct_id,"gene"="controlled.match",criterion.type, feature, criteria ))
## filter out matches against exclusion criteria
eligibilityMatches <- filter(eligibilityMatches, criterion.type=="INCLUSION")
## filter out matches against prior therapy
eligibilityMatches <- filter(eligibilityMatches, feature!="PRIOR_THERAPY")
head(eligibilityMatches)
eligibilityMatches$rationale <- paste0("Enrolling subjects with ", eligibilityMatches$gene, " ", eligibilityMatches$feature)
eligibilityMatches$score <- 3
names(eligibilityMatches)
unique(dplyr::select(eligibilityMatches, nct_id, "symbol"="gene", "variant_type" = "feature", rationale, "inclusion_criterion"="criteria", "eligibility_score" = "score"))
names(eligibilityMatches)
## start with indexed eligibilities
eligibilityMatches <- unique(dplyr::select(indexed.eligibilities, nct_id,"gene"="controlled.match",criterion.type, feature, criteria ))
## filter out matches against exclusion criteria
eligibilityMatches <- filter(eligibilityMatches, criterion.type=="INCLUSION")
## filter out matches against prior therapy
eligibilityMatches <- filter(eligibilityMatches, feature!="PRIOR_THERAPY")
## concatenate gene and feature
# eligibilityMatches$gene <- paste(eligibilityMatches$gene, eligibilityMatches$feature, sep = " ")
## add rationale column
eligibilityMatches$rationale <- paste0("Enrolling subjects with ", eligibilityMatches$gene, " ", eligibilityMatches$feature)
## add a score
eligibilityMatches$score <- 3
## where multiple criteria, aggregate
as.data.frame(eligibilityMatches %>%
group_by(nct_id, gene, criterion.type, feature, rationale, score) %>%
summarise(
criteria = paste(unique(criteria), collapse = "\n\n")
))
## where multiple criteria, aggregate
eligibilityMatches <- as.data.frame(eligibilityMatches %>%
group_by(nct_id, gene, criterion.type, feature, rationale, score) %>%
summarise(
criteria = paste(unique(criteria), collapse = "\n\n")
))
## select and rename columns to match targetMatches and pathwayMatches
eligibilityMatches <- unique(dplyr::select(eligibilityMatches, nct_id, "symbol"="gene", "variant_type" = "feature", rationale, "matching_criteria"="criteria", "eligibility_score" = "score"))
unique(eligibilityMatches$eligibility_score)
names(eligibilityMatches)
names(scoredMatches)
merge(x=scoredMatches, by.x=c("nct_id", "symbol"), all.x=TRUE,
y=eligibilityMatches, by.y = c("nct_id", "symbol"), all.y=TRUE)
scoredMatches <- merge(x=scoredMatches, by.x=c("nct_id", "symbol"), all.x=TRUE,
y=eligibilityMatches, by.y = c("nct_id", "symbol"), all.y=TRUE)
View(scoredMatches)
## start with studies and their interventions
targetMatches <- unique(dplyr::select(cancerStudies, nct_id, interventions))
## join to drugs.targets on intervention name (verbatim)
targetMatches <- merge(x=targetMatches, by.x="interventions", y=drugs.targets, by.y="interventions.verbatim" )
## drop rows where drugTargetSymbol is NA
targetMatches <- targetMatches[!is.na(targetMatches$drugTargetSymbol), ]
## drop unnecessary columns
targetMatches <- unique(dplyr::select(targetMatches, nct_id, interventions.processed, drugTargetSymbol))
## add rationale column
targetMatches$intervention_rationale <- paste0("Study drug (", targetMatches$interventions.processed, ") targets ", targetMatches$drugTargetSymbol)
## drop intervention column
targetMatches <- unique(dplyr::select(targetMatches, -interventions.processed))
## rename drugTargetSymbol column
targetMatches <- rename(targetMatches,"symbol"= "drugTargetSymbol")
## add a score
targetMatches$intervention_score <- 2
## start with studies and their interventions
pathwayMatches <- unique(dplyr::select(cancerStudies, nct_id, interventions))
## join to drugs.targets on intervention name (verbatim)
pathwayMatches <- merge(x=pathwayMatches, by.x="interventions", y=drugs.targets, by.y="interventions.verbatim" )
## drop rows where drugTargetSymbol is NA
pathwayMatches <- pathwayMatches[!is.na(pathwayMatches$drugTargetSymbol), ]
## drop unnecessary columns
pathwayMatches <- unique(dplyr::select(pathwayMatches, nct_id, interventions.processed, drugTargetSymbol))
## join to edges, where drugTargetSymbol == to
## i.e. intervention targets the downstream node
pathwayMatches <- merge(x=pathwayMatches, by.x="drugTargetSymbol", y=edges, by.y="to")
## select and rename columns
pathwayMatches <- unique(dplyr::select(pathwayMatches,nct_id, interventions.processed, "downstream"="drugTargetSymbol","upstream"="from" ))
## where an intervention targets >1 gene, aggregate
pathwayMatches <- as.data.frame(pathwayMatches %>%
group_by(nct_id, interventions.processed, upstream) %>%
summarise(
downstream = paste(unique(downstream), collapse = ", ")
))
## add rationale column
pathwayMatches$intervention_rationale <- paste0("Study drug (", pathwayMatches$interventions.processed, ") targets downstream gene(s) (", pathwayMatches$downstream, ")")
## drop intervention column
pathwayMatches <- unique(dplyr::select(pathwayMatches, -c(interventions.processed, downstream)))
## rename upstream column to drugTargetSymbol to match targetMatches
pathwayMatches <- rename(pathwayMatches, "symbol"="upstream")
## add a score
pathwayMatches$intervention_score <- 1
scoredMatches <- rbind(targetMatches, pathwayMatches)
## start with indexed eligibilities
eligibilityMatches <- unique(dplyr::select(indexed.eligibilities, nct_id,"gene"="controlled.match",criterion.type, feature, criteria ))
## filter out matches against exclusion criteria
eligibilityMatches <- filter(eligibilityMatches, criterion.type=="INCLUSION")
## filter out matches against prior therapy
eligibilityMatches <- filter(eligibilityMatches, feature!="PRIOR_THERAPY")
## concatenate gene and feature
# eligibilityMatches$gene <- paste(eligibilityMatches$gene, eligibilityMatches$feature, sep = " ")
## add rationale column
eligibilityMatches$eligibility_rationale <- paste0("Enrolling subjects with ", eligibilityMatches$gene, " ", eligibilityMatches$feature)
## add a score
eligibilityMatches$eligibility_score <- 3
## where multiple criteria, aggregate
eligibilityMatches <- as.data.frame(eligibilityMatches %>%
group_by(nct_id, gene, criterion.type, feature, eligibility_rationale, eligibility_score) %>%
summarise(
criteria = paste(unique(criteria), collapse = "\n\n")
))
## select and rename columns to match targetMatches and pathwayMatches
eligibilityMatches <- unique(dplyr::select(eligibilityMatches, nct_id, "symbol"="gene", "variant_type" = "feature", eligibility_rationale, "matching_criteria"="criteria", eligibility_score))
scoredMatches <- merge(x=scoredMatches, by.x=c("nct_id", "symbol"), all.x=TRUE,
y=eligibilityMatches, by.y = c("nct_id", "symbol"), all.y=TRUE)
scoredMatches$combined_score <- scoredMatches$intervention_score + scoredMatches$eligibility_score
names(scoredMatches)
scoredMatches <- unique(dplyr::select(scoredMatches, symbol, variant_type, nct_id, intervention_rationale, eligibility_rationale, matching_criteria, combined_score))
rmarkdown::render("trialMatchDataRefresh.Rmd")
formattable(head(scoredMatches))
head(scoredMatches[order(scoredMatches$combined_score, decreasing = TRUE), ])
scoredMatches <- scoredMatches[order(scoredMatches$combined_score, decreasing = TRUE), ]
formattable(head(scoredMatches))
names(scoredMatches)
rmarkdown::render("trialMatchDataRefresh.Rmd")
sum(3,NA)
sum(na.omit(3,NA))
scoredMatches$combined_score <- sum(na.omit(scoredMatches$intervention_score, scoredMatches$eligibility_score))
rmarkdown::render("trialMatchDataRefresh.Rmd")
sum(na.omit(scoredMatches$intervention_score, scoredMatches$eligibility_score))
head(scoredMatches)
scoredMatches <- rbind(targetMatches, pathwayMatches)
scoredMatches <- merge(x=scoredMatches, by.x=c("nct_id", "symbol"), all.x=TRUE,
y=eligibilityMatches, by.y = c("nct_id", "symbol"), all.y=TRUE)
sum(na.omit(scoredMatches$intervention_score, scoredMatches$eligibility_score))
sum(scoredMatches$intervention_score, scoredMatches$eligibility_score)
scoredMatches$intervention_score + scoredMatches$eligibility_score
rowSums(scoredMatches[,c("intervention_score", "eligibility_score")], na.rm=TRUE)
scoredMatches$combined_score <- rowSums(scoredMatches[,c("intervention_score", "eligibility_score")], na.rm=TRUE)
## select and reorder columns
scoredMatches <- unique(dplyr::select(scoredMatches, symbol, variant_type, nct_id, intervention_rationale, eligibility_rationale, matching_criteria, combined_score))
## order on combined_score descending
scoredMatches <- scoredMatches[order(scoredMatches$combined_score, decreasing = TRUE), ]
rmarkdown::render("trialMatchDataRefresh.Rmd")
scoredMatches <- rbind(targetMatches, pathwayMatches)
head(scoredMatches)
head(eligibilityMatches)
unique(eligibilityMatches$variant_type)
scoredMatches$variant_type <- list(c("mutation", "fusion", "amplification"))
head(scoredMatches)
head(data.frame(unnest(scoredMatches, cols = "variant_type")))
scoredMatches <- data.frame(unnest(scoredMatches, cols = "variant_type"))
names(eligibilityMatches)
scoredMatches <- merge(x=scoredMatches, by.x=c("nct_id", "symbol", "variant_type"), all.x=TRUE,
y=eligibilityMatches, by.y = c("nct_id", "symbol", "variant_type"), all.y=TRUE)
## add a combined score
scoredMatches$combined_score <- rowSums(scoredMatches[,c("intervention_score", "eligibility_score")], na.rm=TRUE)
## select and reorder columns
scoredMatches <- unique(dplyr::select(scoredMatches, symbol, variant_type, nct_id, intervention_rationale, eligibility_rationale, matching_criteria, combined_score))
## order on combined_score descending
scoredMatches <- scoredMatches[order(scoredMatches$combined_score, decreasing = TRUE), ]
rmarkdown::render("trialMatchDataRefresh.Rmd")
example <- "- Arm 3: Presence of ALK/RET gene fusion and ALK IHC+/RET FISH	"
unlist(strsplit(x=example, split = " |\\(|\\)|,|-|/"))
rmarkdown::render("trialMatchDataRefresh.Rmd")
rmarkdown::render("trialMatchDataRefresh.Rmd")
example
sentence <- "- Arm 3: Presence of ALK/RET gene fusion and ALK IHC+/RET FISH	"
sentence
criterion <- unlist(strsplit(x=criterion, split = " |\\(|\\)|,|-|/"))
criterion <- unlist(strsplit(x=sentence, split = " |\\(|\\)|,|-|/"))
criterion
indices <- grep(pattern = str_squish(fusionPattern), x = criterion, ignore.case = TRUE)
indices
starts <- indices - fusionWordRange
ends <- indices + fusionWordRange
range <- numeric(0)
for(j in 1:length(starts)) { ## because there may be more than one match
if(starts[j] <1) {starts[j] <- 1}
range <- append(range,starts[j]:ends[j])
}
range
range <- unique(range)
range
criterion <- criterion[range]
criterion
criterion <- criterion[!is.na(criterion)]
criterion
criterion <- unique(criterion[criterion %in% humanGenes$Aliases])
criterion
criterion <- criterion[nchar(criterion)>2]
criterion
criterion <- criterion[criterion != "not"]
criterion
list(criterion)
"RET" %in$ humanGenes$Aliases
"RET" %in% humanGenes$Aliases
filter(humanGenes, Aliases=="RET")
head(fusion.eligibilities)
filter(fusion.eligibilities, controlled.match=="RET")
filter(fusion.eligibilities, nct_id=="NCT02314481")
sentence
criterion <- sentence
alternative.criterion <- gsub(pattern = "./", replacement = "", x=criterion)
criterion <- paste(criterion,alternative.criterion, sep = " " )
criterion
criterion <- unlist(strsplit(x=criterion, split = " |\\(|\\)|,|-|/"))
criterion
indices <- grep(pattern = str_squish(fusionPattern), x = criterion, ignore.case = TRUE)
## specify start and end point(s) based on specified word range
starts <- indices - fusionWordRange
ends <- indices + fusionWordRange
range <- numeric(0)
for(j in 1:length(starts)) { ## because there may be more than one match
if(starts[j] <1) {starts[j] <- 1}
range <- append(range,starts[j]:ends[j])
} ## now range contains the indices of the words either side of the     mutantPattern, within specified word range
range <- unique(range) ## if the ranges overlap, just get the unique elements
## range is the indices of words within the criterion that are within the specified wordRange from mutantPattern... (i.e. the ones we want to keep)
## subset the criterion retain only words within specified range
criterion <- criterion[range]
criterion
criterion <- criterion[!is.na(criterion)]
## now subset and retain only words that are a valid gene alias
criterion <- unique(criterion[criterion %in% humanGenes$Aliases])
## drop any aliases that are a single or 2 characters
criterion <- criterion[nchar(criterion)>2]
## drop any matches against the word "not"
criterion <- criterion[criterion != "not"]
list(criterion)
rmarkdown::render("trialMatchDataRefresh.Rmd")
