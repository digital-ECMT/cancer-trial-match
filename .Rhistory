head(split2.1)
split2.2 <- split(split1.1, split1.1$Sepal.Length < 5.5)[[2]]
head(split2.2)
bootstrap1 <- training[sample(nrow(training),size=nrow(training),replace=TRUE),]  ## sample rows from training dataset, all variables
split(bootstrap1, bootstrap1$Petal.Length < 2.6)[[1]]
split1.1 <- split(bootstrap1, bootstrap1$Petal.Length < 2.6)[[1]]
head(split1.1)
split1.2 <- split(bootstrap1, bootstrap1$Petal.Length < 2.6)[[2]]
split1.1 <- training[sample(nrow(training),size=nrow(split1.1),replace=TRUE),c(sample(1:4,size=2,replace=TRUE),5)]  ## resample all rows and 2 variables from the result of the first split
head(split1.1)
split1.2 <- training[sample(nrow(training),size=nrow(split1.2),replace=TRUE),c(sample(1:4,size=2,replace=TRUE),5)]  ## resample all rows and 2 variables from the result of the first split
head(split1.2)
available.for.split <- sample(names(split1.1)[1:4], size = 4, replace = TRUE))
sample(names(split1.1)[1:4], size = 4, replace = TRUE)
sample(names(split1.1)[1:4], size = 4, replace = TRUE)
sample(names(split1.1)[1:4], size = 4, replace = TRUE)
> split1.1 <- split(bootstrap1, bootstrap1$Petal.Length < 2.6)[[1]]
> split1.2 <- split(bootstrap1, bootstrap1$Petal.Length < 2.6)[[2]]
split1.1 <- split(bootstrap1, bootstrap1$Petal.Length < 2.6)[[1]]
split1.2 <- split(bootstrap1, bootstrap1$Petal.Length < 2.6)[[2]]
sample(names(split1.1)[1:4], size = 4, replace = TRUE)
sample(names(split1.1)[1:4], size = 4, replace = TRUE)
sample(names(split1.1)[1:4], size = 4, replace = TRUE)
available.for.split <- sample(names(split1.1)[1:4], size = 4, replace = TRUE)
available.for.split
head(split1.1)
head(split1.2)
?getTree
library(randomForest)
?getTree
modFit <- train(Species ~ ., data = training, method="rf", prox=TRUE)
getTree(modFit$finalModel, k=1)
class(getTree(modFit$finalModel, k=1))
fancyRpartPlot(getTree(modFit$finalModel, k=1))
cforest(Species ~ ., data=training, controls=cforest_control(mtry=2, mincriterion=0))
rm(list=ls())
data("iris")
library(caret)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain, ]
testing <- iris[-inTrain, ]
head(training)
> modFit <- train(Species ~ ., method="rpart", data=training) ## rpart is R's method for creating decision trees
modFit <- train(Species ~ ., method="rpart", data=training) ## rpart is R's method for creating decision trees
library(rattle)
fancyRpartPlot(modFit$finalModel) ## nicer looking plot
split1.1 <- split(training, Petal.Length<2.5)[[1]]
split1.1 <- split(training, training$Petal.Length<2.5)[[1]]
split1.2 <- split(training, training$Petal.Length<2.5)[[2]]
head(split1.1,10)
head(split1.2,10)
head(training,10)
table(iris$Species)
table(training$Species)
table(split1.1$Species)
table(split1.2$Species)
split2.1 <- split(split1.1, split1.1$Petal.Width<1.6)[[1]]
split2.2 <- split(split1.1, split1.1$Petal.Width<1.6)[[2]]
head(split2.1)
table(split2.1$Species)
head(split2.2)
table(split2.2$Species)
bootstrap1 <- training[sample(nrow(training),size=nrow(training),replace=TRUE),]
split1.1 <- split(bootstrap1, bootstrap1$Petal.Length < 2.6)[[1]]
table(split1.1$Species)
split1.2 <- split(bootstrap1, bootstrap1$Petal.Length < 2.6)[[2]]
table(split1.2$Species)
available.for.split <- sample(names(split1.1)[1:4], size = 4, replace = TRUE)
available.for.split
available.for.split <- sample(names(split1.1)[1:4], size = 4, replace = TRUE)
available.for.split
available.for.split <- sample(names(split1.1)[1:4], size = 4, replace = TRUE)
available.for.split
available.for.split <- sample(names(split1.1)[1:4], size = 4, replace = TRUE)
available.for.split
read.csv(file = "https://civicdb.org/downloads/nightly/nightly-ClinicalEvidenceSummaries.tsv", sep = "\t")
evidence <- read.csv(file = "https://civicdb.org/downloads/nightly/nightly-ClinicalEvidenceSummaries.tsv", sep = "\t")
dim(evidence)
names(evidence)
"H773_V774insAH" %in% evidence$variant
filter(evidence, gene=="EGFR")
library(dplyr)
filter(evidence, gene=="EGFR")
unique(filter(evidence, gene=="EGFR"))
unique(filter(evidence, gene=="EGFR"))$variant
sort(unique(filter(evidence, gene=="EGFR"))$variant)
sort(unique(filter(evidence, gene=="MYC"))$variant)
sort(unique(filter(evidence, gene=="MYC")))
unique(filter(evidence, gene=="MYC"))
sort(unique(filter(evidence, gene=="FGFR3"))$variant)
unique(filter(evidence, gene=="FGFR3"))
unique(filter(evidence, gene=="KRAS"))
unique(filter(evidence, gene=="KRAS"))$variant
sort(unique(filter(evidence, gene=="FGFR3")$variant))
sort(unique(filter(evidence, gene=="KRAS")$variant))
unique(filter(evidence, gene=="KRAS" & variant =="Q61R"))
unique(filter(evidence, gene=="KRAS" & variant =="Q61*"))
unique(filter(evidence, gene=="KRAS" & variant =="Q61.*"))
unique(filter(evidence, gene=="KRAS" & variant =="Q61*"))
unique(filter(evidence, gene=="KRAS" & variant =="Q61"))
rm(list=ls())
setwd("GitHub/cancer-trial-match")
rmarkdown::render("variantAnalysis.Rmd")
?unnest
??unnest
rmarkdown::render("variantAnalysis.Rmd")
head(evidence)
names(evidence)
formattable(filter(evidence, gene == "ARID1A"))
rmarkdown::render("trialMatchDataRefresh.Rmd")
names(evidence)
unique(evidence$drugs)
evidence$drugs <- strsplit(evidence$drugs, split=",")
evidence <- unnest(data=evidence, drugs)
length(unique(evidence$drugs))
head(NCItPharmacologics)
class(NCItPharmacologics)
NCItPharmacologics <- as.data.frame(NCItPharmacologics)
head(NCItPharmacologics)
length(unique(NCItPharmacologics$Synonyms))
length(unique(NCItPharmacologics$SynonymsLower))
?setdiff
unique(tolower(evidence$drugs))
setdiff(unique(tolower(evidence$drugs)),unique(NCItPharmacologics$SynonymsLower) )
length(setdiff(unique(tolower(evidence$drugs)),unique(NCItPharmacologics$SynonymsLower) ))
length(setdiff(unique(tolower(evidence$drugs)),unique(NCItPharmacologics$SynonymsLower) )) / length(unique(tolower(evidence$drugs)))
"idarubicin" %in% NCItPharmacologics$SynonymsLower
"azd5438" %in% NCItPharmacologics$SynonymsLower
## how many drugs listed?
drugsInEvidence <- unique(tolower(evidence$drugs))
length(drugsInEvidence)
## how many drug synonyms listed in NCI thesaurus?
drugsInNCIt <- unique(NCItPharmacologics$SynonymsLower)
length(drugsInNCIt)
## how many drugs are in evidence$drugs but not NCItPharmacologics$synonyms?
drugsNotInNCIt <- setdiff(drugsInEvidence, drugsInNCIt)
length(drugsNotInNCIt)
length(drugsNotInNCIt)/length(drugsInEvidence)
length(unique(tolower(NCItPharmacologics$ParentTerm)))
NCItParentTerms <- unique(tolower(NCItPharmacologics$ParentTerm))
setdiff(drugsNotInNCIt,NCItParentTerms  )
rmarkdown::render("trialMatchDataRefresh.Rmd")
rmarkdown::render("variantAnalysis.Rmd")
rmarkdown::render("trialMatchDataRefresh.Rmd")
head(targets)
View(scoredMatches)
View(pathwayMatches)
head9pathwaym
head(pathwayMatches)
View(manualNLPmatches)
View(interventionMatches)
View(cancerStudies)
View(manualNLPmatches)
View(targetMatches)
View(targetMatches)
View(interventionMatches)
View(variants)
View(evidence)
View(variants)
View(targetMatches)
View(targets)
View(interventionMatches)
View(pathwayMatches)
View(targets)
View(targetMatches)
View(NCItPharmacologics)
unique(read.table(file = "manualNLPmatches.tsv", header = TRUE, stringsAsFactors = FALSE))
manualNLPmatches <- unique(read.table(file = "manualNLPmatches.tsv", header = TRUE, stringsAsFactors = FALSE))
pathwayMatches <- unique(read.table(file = "pathwayMatches.tsv", header = TRUE, stringsAsFactors = FALSE))
head(pathwayMatches)
unique(dplyr::select(targetMatches, "from" = "Interventions", "to"="Target"))
head(unique(dplyr::select(targetMatches, "from" = "Interventions", "to"="Target")))
dim(unique(dplyr::select(targetMatches, "from" = "Interventions", "to"="Target")))
gene.target.edges <- unique(dplyr::select(targetMatches, "from" = "Interventions", "to"="Target"))
dim(gene.target.edges)
dim(gene.target.edges[complete.cases(gene.target.edges), ])
gene.target.edges <- gene.target.edges[complete.cases(gene.target.edges), ]
gene.target.edges$label <- "targeted.by"
head(gene.target.edges)
gene.target.edges <- unique(dplyr::select(targetMatches, "from" = "Target", "to"="Interventions"))
gene.target.edges <- gene.target.edges[complete.cases(gene.target.edges), ]
gene.target.edges$label <- "targeted.by"
head(gene.target.edges)
head(manualNLPmatches)
"CREBBP" %in% manualNLPmatches$matching.symbol
"CREBBP" %in% manualNLPmatches
"CCS1477" %in% cancerStudies
"NCT03568656" %in% cancerStudies
"NCT03568656" %in% cancerStudies$ncnct_id
grep(pattern = "prostate cancer", x="Metastatic Castration-Resistant Prostate Cancer", ignore.case = TRUE)
grep(pattern = "solid tumor", x="Advanced Solid Tumors", ignore.case = TRUE)
unique(as.character(conditionSynonyms$condition.synonyms))
"NCT03568656" %in% cancerStudies$nct_id
filter(cancerStudies, nct_id=="NCT03568656")
View(targets)
"CCS1477" %in% targets$PreferredTerm
"CCS1477" %in% NCItPharmacologics$Synonyms
filter(NCItPharmacologics, Synonyms=="CCS1477")
View(humanGeneMatches)
View(NCItPharmacologics)
View(targets)
View(NCItPharmacologics)
head(manualNLPmatches)
gene.study.edges <- unique(dplyr::select(targetMatches, "from" = "matching.symbol", "to"="nct_id", "label"="criteria"))
gene.study.edges <- unique(dplyr::select(manualNLPmatches, "from" = "matching.symbol", "to"="nct_id", "label"="criteria"))
head(gene.study.edges)
formattable(head(gene.study.edges))
gene.downstream.edges <- unique(dplyr::select(pathwayMatches, "from" = "network.element.gene.names", "to"="downstream.genes", "label"="downstream"))
head(gene.downstream.edges)
getwd()
rm(list=ls())
rmarkdown::render("variantAnalysis.Rmd")
head(cancerStudies)
drug.study.edges <- unique(dplyr::select(cancerStudies, "from" = "interventions", "to"="nct_id", "label"="brief_title"))
formattable(head(drug.study.edges))
head(evidence)
evidence <- as.data.frame(evidence)
head(evidence)
unique(evidence$evidence_type)
evidence.edges <- unique(dplyr::select(evidence, gene, variant, drugs, evidence_direction, clinical_significance, evidence_statement))
dim(evidence)
dim(evidence.edges)
evidence.edges$gene_variant <- paste(evidence.edges$gene, evidence.edges$variant, sep="_")
variant.drug.edges <- unique(dplyr::Select(evidence.edges, "from"="gene_variant", "to"="drugs", "label"="evidence_statement"))
variant.drug.edges <- unique(dplyr::select(evidence.edges, "from"="gene_variant", "to"="drugs", "label"="evidence_statement"))
formattable(head(variant.drug.edges))
## variant to drug edges from evidence
# subset evidence
evidence.edges <- unique(dplyr::select(evidence, gene, variant, drugs, evidence_direction, clinical_significance, evidence_statement))
# concatenate evidence direction and clinical_significance
evidence.edges$evidence_statement <- paste(evidence.edges$evidence_direction, evidence.edges$clinical_significance, evidence.edges$evidence_statement, sep="; ")
# create gene_variant column
evidence.edges$gene_variant <- paste(evidence.edges$gene, evidence.edges$variant, sep="_")
# create edge lists
variant.drug.edges <- unique(dplyr::select(evidence.edges, "from"="gene_variant", "to"="drugs", "label"="evidence_statement"))
formattable(head(variant.drug.edges))
# subset evidence
evidence.edges <- unique(dplyr::select(evidence, gene, variant, drugs, evidence_direction, clinical_significance, evidence_statement))
# concatenate evidence direction and clinical_significance
evidence.edges$evidence_statement <- paste(toupper(evidence.edges$evidence_direction), toupper(evidence.edges$clinical_significance), evidence.edges$evidence_statement, sep="; ")
# create gene_variant column
evidence.edges$gene_variant <- paste(evidence.edges$gene, evidence.edges$variant, sep="_")
# create edge lists
variant.drug.edges <- unique(dplyr::select(evidence.edges, "from"="gene_variant", "to"="drugs", "label"="evidence_statement"))
formattable(head(variant.drug.edges))
head(variantds)
head(variants)
variant.edges <- unique(dplyr::select(variants, gene, variant, significance)
)
variant.edges$gene_variant <- paste(variant.edges$gene, variant.edges$variant, sep="_")
variant.gene.edges <- unique(dplyr::select(variants, "from"="gene_variant", "to"="gene", "label"="significance"))
formattable(head(variant.gene.edges))
variant.gene.edges <- unique(dplyr::select(variant.edges, "from"="gene_variant", "to"="gene", "label"="significance"))
formattable(head(variant.gene.edges))
edgeList <- rbind(gene.target.edges, gene.study.edges, gene.downstream.edges, drug.study.edges, variant.drug.edges, variant.gene.edges)
View(edgeList)
library(igraph)
install.packages("networkD3")
library(networkD3)
simpleNetwork(edgeList, height="100px", width="100px")
simple.graph <- simpleNetwork(edgeList, height="100px", width="100px")
class(simple.graph)
graph_from_data_frame(d=edgeList, directed=T)
class(graph_from_data_frame(d=edgeList, directed=T))
basic.igraph <- graph_from_data_frame(d=edgeList, directed=T)
class(basic.igraph)
plot(basic.igraph)
?subcomponent
subcomponent(basic.igraph, "KRAS", mode = c("out"))
subcomponent(simple.graph, "KRAS", mode = c("out"))
class(simple.graph)
downstreamNRASnodes <- subcomponent(basic.igraph, "NRAS", mode = c("out"))
downstreamNRASnodes
downstreamNodes <- subcomponent(basic.igraph, "NRAS", mode = c("out"))
downstreamNodes
downstreamGraph <- induced_subgraph(graph=basic.igraph, vids = downstreamNodes, impl = "auto")
plot(downstreamGraph, layout = layout_with_graphopt, edge.arrow.size = 0.2)
plot(downstreamGraph, layout=layout_as_tree(downstreamGraph, root=which(V(downstreamGraph)$name == "NRAS"),mode="out"))
gene.nodes <- unique(dplyr::select(targetMatches, "id" = "Target"))
gene.nodes$class <- "gene"
head(targetMatches)
head(variant.edges)
variant.nodes <- unique(dplyr::select(variant.edges, "id" = "gene_variant"))
head(gene.downstream.edges)
unique(c(targetMatches$Target, gene.downstream.edges$from, gene.downstream.edges$to))
data.frame(id=unique(c(targetMatches$Target, gene.downstream.edges$from, gene.downstream.edges$to)))
data.frame(id=unique(c(cancerStudies$interventions)))
drug.nodes <- data.frame(id=unique(c(targetMatches$Target, gene.downstream.edges$from, gene.downstream.edges$to)))
data.frame(id=unique(cancerStudies$nct_id))
study.nodes$class <- "study"
study.nodes <- data.frame(id=unique(cancerStudies$nct_id))
study.nodes$class <- "study"
head(variant.edges)
data.frame(id=unique(c(targetMatches$Target, gene.downstream.edges$from, gene.downstream.edges$to)))
head(cancerStudies)
## gene nodes
gene.nodes <- data.frame(id=unique(c(targetMatches$Target, gene.downstream.edges$from, gene.downstream.edges$to)))
gene.nodes$class <- "gene"
gene.nodes$popup <- NA
formattable(head(gene.nodes))
## variant nodes from variant.edges
variant.nodes <- unique(dplyr::select(variant.edges, "id" = "gene_variant", "popup"="significance"))
variant.nodes$class <- "variant"
formattable(head(variant.nodes))
## drug nodes
drug.nodes <- data.frame(id=unique(cancerStudies$interventions))
drug.nodes$popup <- NA
drug.nodes$class <- "drug"
formattable(head(drug.nodes))
## study nodes <-
study.nodes <- unique(dplyr::select(cancerStudies, "id" = "nct_id", "popup"="brief_title"))
study.nodes$class <- "study"
formattable(head(study.nodes))
head(variant.edges)
## gene to drug edges from targetMatches
gene.target.edges <- unique(dplyr::select(targetMatches, "from" = "Target", "to"="Interventions"))
gene.target.edges <- gene.target.edges[complete.cases(gene.target.edges), ]
gene.target.edges$label <- "targeted.by"
formattable(head(gene.target.edges))
## gene to study edges from manualNLPmatches
gene.study.edges <- unique(dplyr::select(manualNLPmatches, "from" = "matching.symbol", "to"="nct_id", "label"="criteria"))
formattable(head(gene.study.edges))
## gene to downstream gene edges from pathwayMatches
gene.downstream.edges <- unique(dplyr::select(pathwayMatches, "from" = "network.element.gene.names", "to"="downstream.genes", "label"="downstream"))
formattable(head(gene.downstream.edges))
## interventions to studies from cancerStudies
drug.study.edges <- unique(dplyr::select(cancerStudies, "from" = "interventions", "to"="nct_id"))
drug.study.edges$label <- "included.in"
formattable(head(drug.study.edges))
## variant to drug edges from evidence
# subset evidence
evidence.edges <- unique(dplyr::select(evidence, gene, variant, drugs, evidence_direction, clinical_significance, evidence_statement))
# concatenate evidence direction and clinical_significance
evidence.edges$evidence_statement <- paste(toupper(evidence.edges$evidence_direction), toupper(evidence.edges$clinical_significance), evidence.edges$evidence_statement, sep="; ")
# create gene_variant column
evidence.edges$gene_variant <- paste(evidence.edges$gene, evidence.edges$variant, sep="_")
# create edge lists
variant.drug.edges <- unique(dplyr::select(evidence.edges, "from"="gene_variant", "to"="drugs", "label"="evidence_statement"))
formattable(head(variant.drug.edges))
## variant to gene from variants
# create a copy
variant.edges <- unique(dplyr::select(variants, gene, variant, significance))
variant.edges$gene_variant <- paste(variant.edges$gene, variant.edges$variant, sep="_")
variant.gene.edges <- unique(dplyr::select(variant.edges, "from"="gene_variant", "to"="gene"))
variant.gene.edges$label <- NA
formattable(head(variant.gene.edges))
## combine into a single edge list
edgeList <- rbind(gene.target.edges, gene.study.edges, gene.downstream.edges, drug.study.edges, variant.drug.edges, variant.gene.edges)
## gene nodes
gene.nodes <- data.frame(id=unique(c(targetMatches$Target, gene.downstream.edges$from, gene.downstream.edges$to)))
gene.nodes$class <- "gene"
gene.nodes$popup <- NA
formattable(head(gene.nodes))
## variant nodes from variant.edges
variant.nodes <- unique(dplyr::select(variant.edges, "id" = "gene_variant", "popup"="significance"))
variant.nodes$class <- "variant"
formattable(head(variant.nodes))
## drug nodes
drug.nodes <- data.frame(id=unique(cancerStudies$interventions))
drug.nodes$popup <- NA
drug.nodes$class <- "drug"
formattable(head(drug.nodes))
## study nodes <-
study.nodes <- unique(dplyr::select(cancerStudies, "id" = "nct_id", "popup"="brief_title"))
study.nodes$class <- "study"
formattable(head(study.nodes))
nodeList <- rbind(gene.nodes, variant.nodes, drug.nodes, study.nodes)
basic.igraph <- graph_from_data_frame(d=edgeList, directed=T, vertices = nodeList)
class(basic.igraph)
## subset for nodes downstream of NRAS
# first, get a list of all nodes reachable from (i.e downstream of) NRAS
downstreamNodes <- subcomponent(basic.igraph, "NRAS", mode = c("out"))
downstreamNodes
# second, create a subgraph of basic.graph, containing only the specified vertices and all the edges among them
downstreamGraph <- induced_subgraph(graph=basic.igraph, vids = downstreamNodes, impl = "auto")
# third, plot downstream subgraph
plot(downstreamGraph, layout = layout_with_graphopt, edge.arrow.size = 0.2)
# layout as tree
plot(downstreamGraph, layout=layout_as_tree(downstreamGraph, root=which(V(downstreamGraph)$name == "NRAS"),mode="out"))
nodeList <- unique(rbind(gene.nodes, variant.nodes, drug.nodes, study.nodes))
basic.igraph <- graph_from_data_frame(d=edgeList, directed=T, vertices = nodeList)
nodeList
variant.edges %>%
group_by(variant) %>%
summarise(significance = paste(unique(significance), collapse = "; "))
as.data.frame(variant.edges %>%
group_by(variant) %>%
summarise(significance = paste(unique(significance), collapse = "; ")))
as.data.frame(variant.edges %>%
group_by(id=gene_variant) %>%
summarise(
popup = paste(unique(significance), collapse = "; ")))
names(as.data.frame(variant.edges %>%
group_by(id=gene_variant) %>%
summarise(
popup = paste(unique(significance), collapse = "; "))))
variant.nodes <- as.data.frame(variant.edges %>%
group_by(id=gene_variant) %>%
summarise(
popup = paste(unique(significance), collapse = "; "),
class = "variant"))
head(variant.nodes)
## gene nodes
gene.nodes <- data.frame(id=unique(c(targetMatches$Target, gene.downstream.edges$from, gene.downstream.edges$to)))
gene.nodes$class <- "gene"
gene.nodes$popup <- NA
formattable(head(gene.nodes))
## variant nodes from variant.edges
# need to account for redundanc in significance column
variant.nodes <- as.data.frame(variant.edges %>%
group_by(id=gene_variant) %>%
summarise(
popup = paste(unique(significance), collapse = "; "),
class = "variant"))
formattable(head(variant.nodes))
## drug nodes
drug.nodes <- data.frame(id=unique(cancerStudies$interventions))
drug.nodes$popup <- NA
drug.nodes$class <- "drug"
formattable(head(drug.nodes))
## study nodes <-
study.nodes <- unique(dplyr::select(cancerStudies, "id" = "nct_id", "popup"="brief_title"))
study.nodes$class <- "study"
formattable(head(study.nodes))
## combine into a single node list
nodeList <- unique(rbind(gene.nodes, variant.nodes, drug.nodes, study.nodes))
basic.igraph <- graph_from_data_frame(d=edgeList, directed=T, vertices = nodeList)
head(nodeList)
head(edgeList)
filter(nodeList, class=="variant")
setdiff(x=unique(c(edgeList$from, edgeList$to)), y=nodeList$id)
head(nodeList)
str(nodeList)
nodeList$id <- as.character(nodeList$id)
setdiff(x=unique(c(edgeList$from, edgeList$to)), y=nodeList$id)
"BRCA1" %in% nodeList$id
## gene nodes
gene.nodes <- data.frame(id=unique(c(targetMatches$Target, gene.downstream.edges$from, gene.downstream.edges$to, manualNLPmatches$matching.symbol)))
gene.nodes$class <- "gene"
gene.nodes$popup <- NA
formattable(head(gene.nodes))
## variant nodes from variant.edges
# need to account for redundanc in significance column
variant.nodes <- as.data.frame(variant.edges %>%
group_by(id=gene_variant) %>%
summarise(
popup = paste(unique(significance), collapse = "; "),
class = "variant"))
formattable(head(variant.nodes))
## drug nodes
drug.nodes <- data.frame(id=unique(cancerStudies$interventions))
drug.nodes$popup <- NA
drug.nodes$class <- "drug"
formattable(head(drug.nodes))
## study nodes <-
study.nodes <- unique(dplyr::select(cancerStudies, "id" = "nct_id", "popup"="brief_title"))
study.nodes$class <- "study"
formattable(head(study.nodes))
## combine into a single node list
nodeList <- unique(rbind(gene.nodes, variant.nodes, drug.nodes, study.nodes))
"BRCA1" %in% nodeList$id
setdiff(x=unique(c(edgeList$from, edgeList$to)), y=nodeList$id)
## gene nodes
gene.nodes <- data.frame(id=unique(c(targetMatches$Target, gene.downstream.edges$from, gene.downstream.edges$to, evidence$edges$gene, manualNLPmatches$matching.symbol)))
gene.nodes$class <- "gene"
gene.nodes$popup <- NA
formattable(head(gene.nodes))
## variant nodes from variant.edges
# need to account for redundanc in significance column
variant.nodes <- as.data.frame(variant.edges %>%
group_by(id=gene_variant) %>%
summarise(
popup = paste(unique(significance), collapse = "; "),
class = "variant"))
formattable(head(variant.nodes))
## drug nodes
drug.nodes <- data.frame(id=unique(cancerStudies$interventions))
drug.nodes$popup <- NA
drug.nodes$class <- "drug"
formattable(head(drug.nodes))
## study nodes <-
study.nodes <- unique(dplyr::select(cancerStudies, "id" = "nct_id", "popup"="brief_title"))
study.nodes$class <- "study"
formattable(head(study.nodes))
## combine into a single node list
nodeList <- unique(rbind(gene.nodes, variant.nodes, drug.nodes, study.nodes))
setdiff(x=unique(c(edgeList$from, edgeList$to)), y=nodeList$id)
## gene nodes
gene.nodes <- data.frame(id=unique(c(targetMatches$Target, gene.downstream.edges$from, gene.downstream.edges$to, evidence$edges$gene, manualNLPmatches$matching.symbol, variant.gene.edges$to)))
gene.nodes$class <- "gene"
gene.nodes$popup <- NA
formattable(head(gene.nodes))
## variant nodes from variant.edges
# need to account for redundanc in significance column
variant.nodes <- as.data.frame(variant.edges %>%
group_by(id=gene_variant) %>%
summarise(
popup = paste(unique(significance), collapse = "; "),
class = "variant"))
formattable(head(variant.nodes))
## drug nodes
drug.nodes <- data.frame(id=unique(cancerStudies$interventions))
drug.nodes$popup <- NA
drug.nodes$class <- "drug"
formattable(head(drug.nodes))
## study nodes <-
study.nodes <- unique(dplyr::select(cancerStudies, "id" = "nct_id", "popup"="brief_title"))
study.nodes$class <- "study"
formattable(head(study.nodes))
## combine into a single node list
nodeList <- unique(rbind(gene.nodes, variant.nodes, drug.nodes, study.nodes))
setdiff(x=unique(c(edgeList$from, edgeList$to)), y=nodeList$id)
