head(split1.1,10)
head(split1.2,10)
head(training,10)
table(iris$Species)
table(training$Species)
table(split1.1$Species)
table(split1.2$Species)
split2.1 <- split(split1.1, split1.1$Petal.Width<1.6)[[1]]
split2.2 <- split(split1.1, split1.1$Petal.Width<1.6)[[2]]
head(split2.1)
table(split2.1$Species)
head(split2.2)
table(split2.2$Species)
bootstrap1 <- training[sample(nrow(training),size=nrow(training),replace=TRUE),]
split1.1 <- split(bootstrap1, bootstrap1$Petal.Length < 2.6)[[1]]
table(split1.1$Species)
split1.2 <- split(bootstrap1, bootstrap1$Petal.Length < 2.6)[[2]]
table(split1.2$Species)
available.for.split <- sample(names(split1.1)[1:4], size = 4, replace = TRUE)
available.for.split
available.for.split <- sample(names(split1.1)[1:4], size = 4, replace = TRUE)
available.for.split
available.for.split <- sample(names(split1.1)[1:4], size = 4, replace = TRUE)
available.for.split
available.for.split <- sample(names(split1.1)[1:4], size = 4, replace = TRUE)
available.for.split
read.csv(file = "https://civicdb.org/downloads/nightly/nightly-ClinicalEvidenceSummaries.tsv", sep = "\t")
evidence <- read.csv(file = "https://civicdb.org/downloads/nightly/nightly-ClinicalEvidenceSummaries.tsv", sep = "\t")
dim(evidence)
names(evidence)
"H773_V774insAH" %in% evidence$variant
filter(evidence, gene=="EGFR")
library(dplyr)
filter(evidence, gene=="EGFR")
unique(filter(evidence, gene=="EGFR"))
unique(filter(evidence, gene=="EGFR"))$variant
sort(unique(filter(evidence, gene=="EGFR"))$variant)
sort(unique(filter(evidence, gene=="MYC"))$variant)
sort(unique(filter(evidence, gene=="MYC")))
unique(filter(evidence, gene=="MYC"))
sort(unique(filter(evidence, gene=="FGFR3"))$variant)
unique(filter(evidence, gene=="FGFR3"))
unique(filter(evidence, gene=="KRAS"))
unique(filter(evidence, gene=="KRAS"))$variant
sort(unique(filter(evidence, gene=="FGFR3")$variant))
sort(unique(filter(evidence, gene=="KRAS")$variant))
unique(filter(evidence, gene=="KRAS" & variant =="Q61R"))
unique(filter(evidence, gene=="KRAS" & variant =="Q61*"))
unique(filter(evidence, gene=="KRAS" & variant =="Q61.*"))
unique(filter(evidence, gene=="KRAS" & variant =="Q61*"))
unique(filter(evidence, gene=="KRAS" & variant =="Q61"))
rm(list=ls())
getwd()
setwd("GitHub/cancer-trial-match")
rmarkdown::render("trialMatchDataRefresh.Rmd")
subcomponent(graph, "KRAS", mode = c("out"))
subcomponent(graph, "KRAS", mode = c("out"))[1]
V(subcomponent(graph, "KRAS", mode = c("out")))
class(subcomponent(graph, "KRAS", mode = c("out")))
subcomponent(graph, "KRAS", mode = c("out"))$name
KRASdownstreamGraph$name
KRASdownstreamNodes$name
shortest_paths(graph=KRASdownstreamGraph, from="KRAS", to = "AKT1", mode = c("out"), weights = NULL, output = "both",
predecessors = FALSE, inbound.edges = FALSE)
shortest_paths(graph=KRASdownstreamGraph, from="KRAS", to = "AKT1", mode = c("out"), weights = NULL, output = "epath",
predecessors = FALSE, inbound.edges = FALSE)
shortest.KRAS.AKT1.path <- shortest_paths(graph=KRASdownstreamGraph, from="KRAS", to = "AKT1", mode = c("out"), weights = NULL, output = "both",
predecessors = FALSE, inbound.edges = FALSE)
class(shortest.KRAS.AKT1.path)
str(shortest.KRAS.AKT1.path)
shortest.KRAS.AKT1.path$epath
shortest.KRAS.AKT1.path$epath[[1]]
shortest.KRAS.AKT1.path$vpath
shortest.KRAS.AKT1.path$epath[[1]]
paste(shortest.KRAS.AKT1.path$epath[[1]], collapse = " ")
shortest.KRAS.AKT1.path$epath[[1]][1]
class(shortest.KRAS.AKT1.path$epath[[1]][1])
class(shortest.KRAS.AKT1.path)
plot(shortest.KRAS.AKT1.path)
class(shortest.KRAS.AKT1.path)
str(shortest.KRAS.AKT1.path)
plot(shortest.KRAS.AKT1.path$epath)
class(shortest.KRAS.AKT1.path$epath)
shortest.KRAS.AKT1.path$epath[1]
shortest.KRAS.AKT1.path$epath[1][1]
shortest.KRAS.AKT1.path$epath[[1]][1]
shortest.KRAS.AKT1.path$epath[[1]]
paste(shortest.KRAS.AKT1.path$epath[[1]])
names(shortest.KRAS.AKT1.path$epath[[1]])
shortest.KRAS.AKT1.path$epath[[1]]
shortest.KRAS.AKT1.path$epath[[1]][1]
unlist(shortest.KRAS.AKT1.path)
unlist(shortest.KRAS.AKT1.path$epath)
unlist(shortest.KRAS.AKT1.path$epath, use.names = TRUE)
unlist(shortest.KRAS.AKT1.path$epath, use.names = FALSE)
unlist(shortest.KRAS.AKT1.path$epath[[1]], use.names = FALSE)
unlist(shortest.KRAS.AKT1.path$epath[[1]][1], use.names = FALSE)
unlist(shortest.KRAS.AKT1.path$epath[[1]], use.names = FALSE)
class(unlist(shortest.KRAS.AKT1.path$epath[[1]], use.names = FALSE))
E(shortest.KRAS.AKT1.path$epath[[1]])
shortest.KRAS.AKT1.path$epath[[1]]$name
as_ids(shortest.KRAS.AKT1.path$epath[[1]])
as_ids(shortest.KRAS.AKT1.path$epath)
as_ids(shortest.KRAS.AKT1.path$epath[[1]])
plot(read.graph(shortest.KRAS.AKT1.path$epath[[1]], format="edgelist"))
class(shortest.KRAS.AKT1.path$epath[[1]])
class(shortest.KRAS.AKT1.path$epath)
class(shortest.KRAS.AKT1.path$epath[[1]])
shortest.KRAS.AKT1.path$epath[[1]]
rmarkdown::render("trialMatchDataRefresh.Rmd")
getwd()
rmarkdown::render("trialMatchDataRefresh.Rmd")
dim(cancerStudies)
names(cancerStudies)
head(cancerStudies)
dim(cancerStudies)
dim(unique(dplyr::select(cancerStudies, nct_id, intervention)))
names(cancerStudies)
dim(unique(dplyr::select(cancerStudies, nct_id, interventions)))
head(drugs.targets)
targetMatches <- merge(x=targetMatches, by.x="interventions", y=drugs.targets, by.y="interventions.verbatim" )
## start with studies and their interventions
targetMatches <- unique(dplyr::select(cancerStudies, nct_id, interventions))
## join to drugs.targets on intervention name (verbatim)
targetMatches <- merge(x=targetMatches, by.x="interventions", y=drugs.targets, by.y="interventions.verbatim" )
head(targetMatches)
targetMatches <- targetMatches[!is.na(targetMatches$drugTargetSymbol), ]
unique(targetMatches$drugTargetSymbol)
head(targetMatches)
names(targetMatches)
dim(targetMatches)
dim(unique(dplyr::select(targetMatches, nct_id, interventions.processed, drugTargetSymbol)))
targetMatches <- unique(dplyr::select(targetMatches, nct_id, interventions.processed, drugTargetSymbol))
head(targetMatches)
targetMatches$rationale <- paste0("Study drug (", targetMatches$interventions.processed, ") targets ", targetMatches$drugTargetSymbol)
head(targetMatches)
head(targetMatches, 40)
targetMatches <- unique(dplyr::select(targetMatches, -interventions.processed))
head(targetMatches, 40)
targetMatches$score <- 2
head(targetMatches, 40)
head(targetMatches)
head(edges)
## start with studies and their interventions
pathwwayMatches <- unique(dplyr::select(cancerStudies, nct_id, interventions))
## join to drugs.targets on intervention name (verbatim)
pathwwayMatches <- merge(x=pathwwayMatches, by.x="interventions", y=drugs.targets, by.y="interventions.verbatim" )
## drop rows where drugTargetSymbol is NA
pathwwayMatches <- pathwwayMatches[!is.na(pathwwayMatches$drugTargetSymbol), ]
head(pathwwayMatches)
pathwwayMatches <- unique(dplyr::select(pathwwayMatches, nct_id, interventions.processed, drugTargetSymbol))
head(pathwwayMatches)
merge(x=pathwayMatches, by.x="drugTargetSymbol", y=edges, by.y="to")
## start with studies and their interventions
pathwayMatches <- unique(dplyr::select(cancerStudies, nct_id, interventions))
## join to drugs.targets on intervention name (verbatim)
pathwayMatches <- merge(x=pathwayMatches, by.x="interventions", y=drugs.targets, by.y="interventions.verbatim" )
## drop rows where drugTargetSymbol is NA
pathwayMatches <- pathwayMatches[!is.na(pathwayMatches$drugTargetSymbol), ]
## drop unnecessary columns
pathwayMatches <- unique(dplyr::select(pathwayMatches, nct_id, interventions.processed, drugTargetSymbol))
## join to edges, where drugTargetSymbol == to
## i.e. intervention targets the downstream node
pathwayMatches <- merge(x=pathwayMatches, by.x="drugTargetSymbol", y=edges, by.y="to")
head(pathwayMatches)
pathwayMatches <- unique(dplyr::select(pathwayMatches, interventions.processed, "downstream"="drugTargetSymbol","upstream"="from" ))
head(pathwayMatches)
## start with studies and their interventions
pathwayMatches <- unique(dplyr::select(cancerStudies, nct_id, interventions))
## join to drugs.targets on intervention name (verbatim)
pathwayMatches <- merge(x=pathwayMatches, by.x="interventions", y=drugs.targets, by.y="interventions.verbatim" )
## drop rows where drugTargetSymbol is NA
pathwayMatches <- pathwayMatches[!is.na(pathwayMatches$drugTargetSymbol), ]
## drop unnecessary columns
pathwayMatches <- unique(dplyr::select(pathwayMatches, nct_id, interventions.processed, drugTargetSymbol))
## join to edges, where drugTargetSymbol == to
## i.e. intervention targets the downstream node
pathwayMatches <- merge(x=pathwayMatches, by.x="drugTargetSymbol", y=edges, by.y="to")
## select and rename columns
pathwayMatches <- unique(dplyr::select(pathwayMatches,nct_id, interventions.processed, "downstream"="drugTargetSymbol","upstream"="from" ))
head(pathwayMatches)
edges <- as_data_frame(pathwaysInCancer.igraph, what = c("edges"))
head(edges)
dim(edges)
dim(edges <- unique(dplyr::filter(edges, entry1type=="gene"))
)
dim(unique(dplyr::filter(edges, entry1type=="gene"))
)
edges <- unique(dplyr::filter(edges, entry1type=="gene"))
## drop unnecessary columns
# keep edge IDs fur use in graph analysis
edges <- unique(dplyr::select(edges, "from"="entry1symbol", "to"="entry2symbol",edgeID, specific_subtype, tooltip))
## unnest the from and to columns
edges$from <- strsplit(edges$from, split = ",")
edges <- unnest(edges, cols = "from")
edges$to <- strsplit(edges$to, split = ",")
edges <- unnest(edges, cols = "to")
## convert back to dataframe
edges <- as.data.frame(edges)
## start with studies and their interventions
pathwayMatches <- unique(dplyr::select(cancerStudies, nct_id, interventions))
## join to drugs.targets on intervention name (verbatim)
pathwayMatches <- merge(x=pathwayMatches, by.x="interventions", y=drugs.targets, by.y="interventions.verbatim" )
## drop rows where drugTargetSymbol is NA
pathwayMatches <- pathwayMatches[!is.na(pathwayMatches$drugTargetSymbol), ]
## drop unnecessary columns
pathwayMatches <- unique(dplyr::select(pathwayMatches, nct_id, interventions.processed, drugTargetSymbol))
## join to edges, where drugTargetSymbol == to
## i.e. intervention targets the downstream node
pathwayMatches <- merge(x=pathwayMatches, by.x="drugTargetSymbol", y=edges, by.y="to")
## select and rename columns
pathwayMatches <- unique(dplyr::select(pathwayMatches,nct_id, interventions.processed, "downstream"="drugTargetSymbol","upstream"="from" ))
head(pathwayMatches)
as.data.frame(pathwayMatches %>%
group_by(nct_id, interventions.processed, upstream) %>%
summarise(
downstream = paste(unique(downstream), collapse = ", ")
))
pathwayMatches <- as.data.frame(pathwayMatches %>%
group_by(nct_id, interventions.processed, upstream) %>%
summarise(
downstream = paste(unique(downstream), collapse = ", ")
))
head(pathwayMatches)
pathwayMatches$rationale <- paste0("Study drug (", pathwayMatches$interventions.processed, ") targets downstream gene(s) (", pathwayMatches$downstream, ")")
head(pathwayMatches)
head(pathwayMatches,30)
## drop intervention column
pathwayMatches <- unique(dplyr::select(pathwayMatches, -interventions.processed))
## add a score
pathwayMatches$score <- 1
head(pathwayMatches,30)
## start with studies and their interventions
pathwayMatches <- unique(dplyr::select(cancerStudies, nct_id, interventions))
## join to drugs.targets on intervention name (verbatim)
pathwayMatches <- merge(x=pathwayMatches, by.x="interventions", y=drugs.targets, by.y="interventions.verbatim" )
## drop rows where drugTargetSymbol is NA
pathwayMatches <- pathwayMatches[!is.na(pathwayMatches$drugTargetSymbol), ]
## drop unnecessary columns
pathwayMatches <- unique(dplyr::select(pathwayMatches, nct_id, interventions.processed, drugTargetSymbol))
## join to edges, where drugTargetSymbol == to
## i.e. intervention targets the downstream node
pathwayMatches <- merge(x=pathwayMatches, by.x="drugTargetSymbol", y=edges, by.y="to")
## select and rename columns
pathwayMatches <- unique(dplyr::select(pathwayMatches,nct_id, interventions.processed, "downstream"="drugTargetSymbol","upstream"="from" ))
## where an intervention targets >1 gene, aggregate
pathwayMatches <- as.data.frame(pathwayMatches %>%
group_by(nct_id, interventions.processed, upstream) %>%
summarise(
downstream = paste(unique(downstream), collapse = ", ")
))
## add rationale column
pathwayMatches$rationale <- paste0("Study drug (", pathwayMatches$interventions.processed, ") targets downstream gene(s) (", pathwayMatches$downstream, ")")
## drop intervention column
pathwayMatches <- unique(dplyr::select(pathwayMatches, -c(interventions.processed, downstream)))
## add a score
pathwayMatches$score <- 1
head(pathwayMatches,30)
names(targetMatches)
names(pathwayMatches)
rename(data=pathwayMatches, "drugTargetSymbol"="upstream")
rename(pathwayMatches, "drugTargetSymbol"="upstream")
## rename drugTargetSymbol column
targetMatches <- rename(targetMatches,"symbol"= "drugTargetSymbol")
## start with studies and their interventions
pathwayMatches <- unique(dplyr::select(cancerStudies, nct_id, interventions))
## join to drugs.targets on intervention name (verbatim)
pathwayMatches <- merge(x=pathwayMatches, by.x="interventions", y=drugs.targets, by.y="interventions.verbatim" )
## drop rows where drugTargetSymbol is NA
pathwayMatches <- pathwayMatches[!is.na(pathwayMatches$drugTargetSymbol), ]
## drop unnecessary columns
pathwayMatches <- unique(dplyr::select(pathwayMatches, nct_id, interventions.processed, drugTargetSymbol))
## join to edges, where drugTargetSymbol == to
## i.e. intervention targets the downstream node
pathwayMatches <- merge(x=pathwayMatches, by.x="drugTargetSymbol", y=edges, by.y="to")
## select and rename columns
pathwayMatches <- unique(dplyr::select(pathwayMatches,nct_id, interventions.processed, "downstream"="drugTargetSymbol","upstream"="from" ))
## where an intervention targets >1 gene, aggregate
pathwayMatches <- as.data.frame(pathwayMatches %>%
group_by(nct_id, interventions.processed, upstream) %>%
summarise(
downstream = paste(unique(downstream), collapse = ", ")
))
## add rationale column
pathwayMatches$rationale <- paste0("Study drug (", pathwayMatches$interventions.processed, ") targets downstream gene(s) (", pathwayMatches$downstream, ")")
## drop intervention column
pathwayMatches <- unique(dplyr::select(pathwayMatches, -c(interventions.processed, downstream)))
## rename upstream column to drugTargetSymbol to match targetMatches
pathwayMatches <- rename(pathwayMatches, "symbol"="upstream")
## add a score
pathwayMatches$score <- 1
head(targetMatches)
head(pathwayMatches)
head(indexed.eligibilities)
rmarkdown::render("trialMatchDataRefresh.Rmd")
head(indexed.eligibilities)
names(indexed.eligibilities)
eligibilityMatches <- unique(dplyr::select(indexed.eligibilities, nct_id,"gene"="controlled.match",criterion.type, feature ))
head(eligibilityMatches)
filter(eligibilityMatches, criterion.type=="EXCLUSION")
filter(indexed.eligibilities, criterion.type=="EXCLUSION")
filter(targetMatches, nct_id="NCT03184571")
head(targetMatches)
filter(targetMatches, nct_id=="NCT03184571")
filter(pathwayMatches, nct_id=="NCT03184571")
head(eligibilityMatches)
filter(eligibilityMatches, criterion.type=="INCLUSION")
eligibilityMatches <- filter(eligibilityMatches, criterion.type=="INCLUSION")
eligibilityMatches <- filter(eligibilityMatches, feature!="PRIOR_THERAPY")
head(eligibilityMatches)
names(targetMatches)
eligibilityMatches$rationale <- paste0("Inclusion criteria cite ", eligibilityMatches$gene, " ", eligibilityMatches$feature)
head(eligibilityMatches)
head(eligibilityMatches,40)
View(eligibilityMatches)
eligibilityMatches$rationale <- paste0("Enrolling subjects with ", eligibilityMatches$gene, " ", eligibilityMatches$feature)
eligibilityMatches$score <- 3
head(eligibilityMatches)
names(targetMatches)
eligibilityMatches <- unique(dplyr::select(eligibilityMatches, nct_id, "symbol"="gene", rationale, score))
head(eligibilityMatches)
head(evidence)
head(variants)
View(evidence)
names(evidence)
variantMatches <- unique(dplyr::select(evidence, variant_id, drugs, evidence_type, evidence_direction, clinical_significance))
head(variantMatches)
names(variants)
dplyr::select(variants, variant_id, gene, variant)
variantMatches <- merge(x=variantMatches, by.x="variant_id", y=dplyr::select(variants, variant_id, gene, variant), by.y="variant_id")
head(variantMatches)
evidence$drugs <- strsplit(x=evidence$drugs, split=",")
evidence <- unnest(data = evidence, cols = drugs, keep_empty = TRUE)
evidence <- as.data.frame(evidence) ## convert to data frame
## start with evidence data
variantMatches <- unique(dplyr::select(evidence, variant_id, drugs, evidence_type, evidence_direction, clinical_significance))
## join variant info
variantMatches <- merge(x=variantMatches, by.x="variant_id", y=dplyr::select(variants, variant_id, gene, variant), by.y="variant_id")
head(variantMatches)
unique(variantMatches$evidence_type)
variantMatches[!is.na(variantMatches$drugs), ]
variantMatches <- variantMatches[!is.na(variantMatches$drugs), ]
head(variantMatches)
unique(variantMatches$evidence_direction)
variantMatches[variantMatches$evidence_direction=="Supports", ]
variantMatches <- variantMatches[variantMatches$evidence_direction=="Supports", ]
names(variantMatches)
names(unique(dplyr::select(variantMatches, gene, variant, clinical_significance, drugs))
)
unique(dplyr::select(variantMatches, gene, variant, clinical_significance, drugs))
variantMatches <- unique(dplyr::select(variantMatches, gene, variant, clinical_significance, drugs))
head(variantMatches)
as.data.frame(variantMatches %>%
group_by(gene,variant, drugs) %>%
summarise(
clinical_significance = paste(unique(clinical_significance), collapse = ", ")
))
variantMatches <- as.data.frame(variantMatches %>%
group_by(gene,variant, drugs) %>%
summarise(
clinical_significance = paste(unique(clinical_significance), collapse = ", ")
))
head(variantMatches)
grep(pattern = ",", x=variantMatches$clinical_significance)
variantMatches[-grep(pattern = ",", x=variantMatches$clinical_significance), ]
variantMatches <- variantMatches[-grep(pattern = ",", x=variantMatches$clinical_significance), ]
head(variantMatches)
head(NCItPharmacologics)
names(cancerStudies)
unique(dplyr::select(cancerStudies, nct_id, interventions)
)
names(drugs)
names(drugs.targets)
unique(dplyr::select(drugs.targets, interventions.verbatim, interventions.processed))
names(cancerStudies)
View(variantMatches)
merge(x=variantMatches, by.x="drugs", y=unique(dplyr::select(drugs.targets, interventions.verbatim, interventions.processed), by.y="interventions.processed")
)
merge(x=variantMatches, by.x="drugs", y=unique(dplyr::select(drugs.targets, interventions.verbatim, interventions.processed)), by.y="interventions.processed")
variantMatches <- merge(x=variantMatches, by.x="drugs", y=unique(dplyr::select(drugs.targets, interventions.verbatim, interventions.processed)), by.y="interventions.processed")
variantMatches$rationale <- paste0("Variant predicts ", variantMatches$clinical_significance, " to study intervention (", variantMatches$drugs, ")")
head(variantMatches)
variantMatches$score <- ifelse(variantMatches$clinical_significance=="Sensitivity/Response", yes=3, no=ifelse(variantMatches$clinical_significance=="Resistance", yes = -3, no=0))
unique(variantMatches$score)
filter(variantMatches, score==0)
variantMatches$score <- ifelse(variantMatches$clinical_significance=="Sensitivity/Response", yes=3, no=-3)
names(variantMatches)
variantMatches$score <- merge(x=variantMatches, by.x="interventions.verbatim", y=unique(dplyr::select(cancerStudies, nct_id, interventions)), by.y="interventions")
merge(x=variantMatches,
by.x="interventions.verbatim",
y=unique(dplyr::select(cancerStudies, nct_id, interventions)),
by.y="interventions")
variantMatches <- merge(x=variantMatches,
by.x="interventions.verbatim",
y=unique(dplyr::select(cancerStudies, nct_id, interventions)),
by.y="interventions")
head(vvariantMatches)
head(variantMatches)
names(variantMatches)
names(targetMatches)
unique(paste(variantMatches$gene, variantMatches$variant, sep = " "))
variantMatches$gene_variant <- paste(variantMatches$gene, variantMatches$variant, sep = " ")
unique(dplyr::select(variantMatches, nct_id, "symbol"="gene_variant", rationale, score))
variantMatches <- unique(dplyr::select(variantMatches, nct_id, "symbol"="gene_variant", rationale, score))
variantMatches
## start with evidence data
variantMatches <- unique(dplyr::select(evidence, variant_id, drugs, evidence_type, evidence_direction, clinical_significance))
## join variant info
variantMatches <- merge(x=variantMatches, by.x="variant_id", y=dplyr::select(variants, variant_id, gene, variant), by.y="variant_id")
## drop rows where drugs == NA
variantMatches <- variantMatches[!is.na(variantMatches$drugs), ]
## drop rows where evidence_direction does not support
variantMatches <- variantMatches[variantMatches$evidence_direction=="Supports", ]
## drop unnecessary columns
variantMatches <- unique(dplyr::select(variantMatches, gene, variant, clinical_significance, drugs))
## if more than one interpretation for a gene-variant-drug combination, aggregate
variantMatches <- as.data.frame(variantMatches %>%
group_by(gene,variant, drugs) %>%
summarise(
clinical_significance = paste(unique(clinical_significance), collapse = ", ")
))
# drop those rows that have >1 interpretation (based on presence of comma)
variantMatches <- variantMatches[-grep(pattern = ",", x=variantMatches$clinical_significance), ]
## join to intervention names as per clinicaltrials.gov
variantMatches <- merge(x=variantMatches, by.x="drugs", y=unique(dplyr::select(drugs.targets, interventions.verbatim, interventions.processed)), by.y="interventions.processed")
variantMatches
head(variantMatches)
variantMatches$rationale <- paste0(variantMatches$gene, " ", variantMatches$variant, " predicts ", variantMatches$clinical_significance, " to study intervention (", variantMatches$drugs, ")")
head(variantMatches)
## add score column
variantMatches$score <- ifelse(variantMatches$clinical_significance=="Sensitivity/Response", yes=3, no=-3)
## join to cancerStudies
variantMatches <- merge(x=variantMatches,
by.x="interventions.verbatim",
y=unique(dplyr::select(cancerStudies, nct_id, interventions)),
by.y="interventions")
## create gene_variant values
variantMatches$gene_variant <- paste(variantMatches$gene, variantMatches$variant, sep = " ")
## select and rename columns to match targetMatches etc
variantMatches <- unique(dplyr::select(variantMatches, nct_id, "symbol"="gene_variant", rationale, score))
head(variantMatches)
rbind(eligibilityMatches, targetMatches, pathwayMatches, variantMatches)
scoredMatches <- rbind(eligibilityMatches, targetMatches, pathwayMatches, variantMatches)
as.data.frame(scoredMatches %>%
group_by(nct_id, symbol) %>%
summarise(
rationale = paste(unique(rationale), collapse = ", "),
score = sum(score)
))
scoredMatches <- as.data.frame(scoredMatches %>%
group_by(nct_id, symbol) %>%
summarise(
rationale = paste(unique(rationale), collapse = ", "),
score = sum(score)
))
View(scoredMatches)
## start with evidence data
variantMatches <- unique(dplyr::select(evidence, variant_id, drugs, evidence_type, evidence_direction, clinical_significance))
## join variant info
variantMatches <- merge(x=variantMatches, by.x="variant_id", y=dplyr::select(variants, variant_id, gene, variant), by.y="variant_id")
## drop rows where drugs == NA
variantMatches <- variantMatches[!is.na(variantMatches$drugs), ]
## drop rows where evidence_direction does not support
variantMatches <- variantMatches[variantMatches$evidence_direction=="Supports", ]
variantMatches <- unique(dplyr::select(variantMatches, gene, variant, clinical_significance, drugs))
head(variantMatches)
unique(variantMatches$variant)
grep(pattern = "mutation", x=variantMatches$variant, ignore.case = T)
variantMatches$variant[grep(pattern = "mutation", x=variantMatches$variant, ignore.case = T)] <- "mutation"
variantMatches$variant[grep(pattern = "amplification", x=variantMatches$variant, ignore.case = T)] <- "amplification"
variantMatches$variant[grep(pattern = "fusion", x=variantMatches$variant, ignore.case = T)] <- "fusion"
## if more than one interpretation for a gene-variant-drug combination, aggregate
variantMatches <- as.data.frame(variantMatches %>%
group_by(gene,variant, drugs) %>%
summarise(
clinical_significance = paste(unique(clinical_significance), collapse = ", ")
))
# drop those rows that have >1 interpretation (based on presence of comma)
variantMatches <- variantMatches[-grep(pattern = ",", x=variantMatches$clinical_significance), ]
## join to intervention names as per clinicaltrials.gov
variantMatches <- merge(x=variantMatches, by.x="drugs", y=unique(dplyr::select(drugs.targets, interventions.verbatim, interventions.processed)), by.y="interventions.processed")
## add rationale column
variantMatches$rationale <- paste0(variantMatches$gene, " ", variantMatches$variant, " predicts ", variantMatches$clinical_significance, " to study intervention (", variantMatches$drugs, ")")
## add score column
variantMatches$score <- ifelse(variantMatches$clinical_significance=="Sensitivity/Response", yes=3, no=-3)
## join to cancerStudies
variantMatches <- merge(x=variantMatches,
by.x="interventions.verbatim",
y=unique(dplyr::select(cancerStudies, nct_id, interventions)),
by.y="interventions")
## create gene_variant values
variantMatches$gene_variant <- paste(variantMatches$gene, variantMatches$variant, sep = " ")
## select and rename columns to match targetMatches etc
variantMatches <- unique(dplyr::select(variantMatches, nct_id, "symbol"="gene_variant", rationale, score))
scoredMatches <- rbind(eligibilityMatches, targetMatches, pathwayMatches, variantMatches)
## aggregate where mutliple lines of rationale per gene-study
scoredMatches <- as.data.frame(scoredMatches %>%
group_by(nct_id, symbol) %>%
summarise(
rationale = paste(unique(rationale), collapse = ", "),
score = sum(score)
))
scoredMatches <- rbind(eligibilityMatches, targetMatches, pathwayMatches)
## aggregate where mutliple lines of rationale per gene-study
scoredMatches <- as.data.frame(scoredMatches %>%
group_by(nct_id, symbol) %>%
summarise(
rationale = paste(unique(rationale), collapse = ", "),
score = sum(score)
))
View(eligibilityMatches)
rmarkdown::render("trialMatchDataRefresh.Rmd")
