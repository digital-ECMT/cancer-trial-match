method = "lm",
data=training)
finMod <- modFit$finalModel
print(modFit)
plot(finMod, pch=19, cex=0.5,col="#00000010")
qplot(finMod$fitted.values, finMod$residuals, colour=race, data=training)
plot(finMod$residuals, pch=19)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisaease)
data(AlzheimerDisease)
data("concrete")
set.seed(1000)
inTrain <- createDataPartition(mixtures$CompressiveStrength, p=3/4)[[1]]
training <- mixtures[inTrain, ]
testing <- mixtures[-inTrain, ]
qplot(training$CompressiveStrength)
plot(training$CompressiveStrength)
names(training)
plot(training$CompressiveStrength, colour="Cement")
qplot(training$CompressiveStrength, colour="Cement")
qplot(training$CompressiveStrength,seq_along(training$CompressiveStrength) colour="Cement")
qplot(training$CompressiveStrength,seq_along(training$CompressiveStrength), colour="Cement")
plot(training$CompressiveStrength, colour="Cement")
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, colour="Cement")
names(training)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, colour="BlastFurnaceSlag")
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, colour="FlyAsh")
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, colour=Cement)
unique(training$Cement)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, colour="Cement")
?cut2
libary(Hmisc)
library(Hmisc)
?cut2
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, colour=cut2(training$Cement))
head(training)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, colour=cut2(training$BlastFurnaceSlag))
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, colour=cut2(training$FlyAsh))
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, colour=cut2(training$Water))
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, colour=cut2(training$Age))
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, colour=cut2(training$FlyAsh))
qplot(training$Superplasticizer)
log(training$Superplasticizer)
set.seed(3433)
adData <- data.frame(diagnosis, predictors)
inTrain <- createDataPartition(adData$diagnosis, p=3/4)[[1]]
training <- adData[inTrain, ]
testing <- adData[-inTrain, ]
names(training)
grep(pattern = "IL", x=names(training))
head(training[ ,grep(pattern = "IL", x=names(training))])
head(training[ ,grep(pattern = "^IL", x=names(training))])
subTraining <- training[ ,grep(pattern = "^IL", x=names(training))]
prComp <- prcomp(subTraining)
head(prComp)
summary(prComp)
preObj <- preProcess(training[ ,grep(pattern = "^IL", x=names(training))])
summary(preObj)
class(preObj)
preObj$rotation
set.seed(3433)
data(AlzheimerDisease)
names(training)
rm(list=ls())
rm(list=ls())
data("iris")
library(caret)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain, ]
testing <- iris[-inTrain, ]
modFit <- train(Species ~ ., data=training, method="rf", prox=TRUE)
modFit <- train(Species ~ ., data=training, method="rf", prox=TRUE)
modFit
getTree(modFit$finalModel, k=2)
library(randomForest)
getTree(modFit$finalModel, k=2)
irisP <- classCenter(training[ ,c(3,4)], training$Species, modFit$finalModel$proximity)
class(irisP)
irisP <- as.data.frame(irisP)
head(irisP)
irisP
irisP$Species <- rownames(irisP)
irisP
p <- qplot(Petal.Width, Petal.Length, col=Species, data=training)
p+ geom_point(aes(x=Petal.Width, y=Petal.Length, col=Species), size=5, shape=4, data=irisP)
pred <- predict(modFit, testing)
testing$predRight <- pred==testing$Species
table(pred, testing$Species)
qplot(Petal.Width, Petal.Length, colour=predRight,data=testing, main="newdata Predictions")
rm(list=ls())
library(caret)
data("iris")
head(iris)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain, ]
testing <- iris[ -inTrain, ]
head(training)
sample(x=training, size=5, replace = TRUE)
?sample
X[sample(nrow(training),size=5,replace=TRUE),]
training[sample(nrow(training),size=5,replace=TRUE),]
training[sample(nrow(training),size=5,replace=TRUE),]
training[sample(nrow(training),size=5,replace=TRUE),]
training[sample(nrow(training),size=5,replace=TRUE),]  ## sample 5 rows from training dataset, all variables
training[sample(nrow(training),size=5,replace=TRUE),c(sample(1:4,size=2,replace=TRUE),5)]  ## sample 5 rows and 2 variables from training dataset
training[sample(nrow(training),size=5,replace=TRUE),c(sample(1:4,size=2,replace=TRUE),5)]  ## sample 5 rows and 2 variables from training dataset
training[sample(nrow(training),size=5,replace=TRUE),c(sample(1:4,size=2,replace=TRUE),5)]  ## sample 5 rows and 2 variables from training dataset
split0 <- training[sample(nrow(training),size=5,replace=TRUE),]  ## sample 5 rows from training dataset, all variables
split1 <- training[sample(nrow(training),size=5,replace=TRUE),c(sample(1:4,size=2,replace=TRUE),5)]  ## sample 5 rows and 2 variables from training dataset
split2 <- training[sample(nrow(training),size=5,replace=TRUE),c(sample(1:4,size=2,replace=TRUE),5)]  ## sample 5 rows and 2 variables from training dataset
install.packages("ineq")
library(ineq)
modFit <- train(Species ~ ., method="rpart", data=split0)
head(split0)
split0 <- training[sample(nrow(training),size=nrow(training),replace=TRUE),]  ## sample 5 rows from training dataset, all variables
modFit <- train(Species ~ ., method="rpart", data=split0)
library(rattle)
fancyRpartPlot(modFit$finalModel)
split(split0, Petal.Length < 2.6)
split(split0, split0$Petal.Length < 2.6)
split(split0, split0$Petal.Length < 2.6)[[1]]
split1.1 <- split(split0, split0$Petal.Length < 2.6)[[1]]
head(split1.1)
split1.2 <- split(split0, split0$Petal.Length < 2.6)[[2]]
head(split1.2)
split1.1 <- training[sample(nrow(training),size=nrow(split1.1),replace=TRUE),c(sample(1:4,size=2,replace=TRUE),5)]  ## resample all rows and 2 variables from the result of the first split
head(split1.1)
modFit <- train(Species ~ ., method="rpart", data=split1.1)
fancyRpartPlot(modFit$finalModel)
split2.1 <- split(split1.1, split1.1$Sepal.Length < 5.5)[[1]]
head(split2.1)
split2.2 <- split(split1.1, split1.1$Sepal.Length < 5.5)[[2]]
head(split2.2)
bootstrap1 <- training[sample(nrow(training),size=nrow(training),replace=TRUE),]  ## sample rows from training dataset, all variables
split(bootstrap1, bootstrap1$Petal.Length < 2.6)[[1]]
split1.1 <- split(bootstrap1, bootstrap1$Petal.Length < 2.6)[[1]]
head(split1.1)
split1.2 <- split(bootstrap1, bootstrap1$Petal.Length < 2.6)[[2]]
split1.1 <- training[sample(nrow(training),size=nrow(split1.1),replace=TRUE),c(sample(1:4,size=2,replace=TRUE),5)]  ## resample all rows and 2 variables from the result of the first split
head(split1.1)
split1.2 <- training[sample(nrow(training),size=nrow(split1.2),replace=TRUE),c(sample(1:4,size=2,replace=TRUE),5)]  ## resample all rows and 2 variables from the result of the first split
head(split1.2)
available.for.split <- sample(names(split1.1)[1:4], size = 4, replace = TRUE))
sample(names(split1.1)[1:4], size = 4, replace = TRUE)
sample(names(split1.1)[1:4], size = 4, replace = TRUE)
sample(names(split1.1)[1:4], size = 4, replace = TRUE)
> split1.1 <- split(bootstrap1, bootstrap1$Petal.Length < 2.6)[[1]]
> split1.2 <- split(bootstrap1, bootstrap1$Petal.Length < 2.6)[[2]]
split1.1 <- split(bootstrap1, bootstrap1$Petal.Length < 2.6)[[1]]
split1.2 <- split(bootstrap1, bootstrap1$Petal.Length < 2.6)[[2]]
sample(names(split1.1)[1:4], size = 4, replace = TRUE)
sample(names(split1.1)[1:4], size = 4, replace = TRUE)
sample(names(split1.1)[1:4], size = 4, replace = TRUE)
available.for.split <- sample(names(split1.1)[1:4], size = 4, replace = TRUE)
available.for.split
head(split1.1)
head(split1.2)
?getTree
library(randomForest)
?getTree
modFit <- train(Species ~ ., data = training, method="rf", prox=TRUE)
getTree(modFit$finalModel, k=1)
class(getTree(modFit$finalModel, k=1))
fancyRpartPlot(getTree(modFit$finalModel, k=1))
cforest(Species ~ ., data=training, controls=cforest_control(mtry=2, mincriterion=0))
rm(list=ls())
data("iris")
library(caret)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain, ]
testing <- iris[-inTrain, ]
head(training)
> modFit <- train(Species ~ ., method="rpart", data=training) ## rpart is R's method for creating decision trees
modFit <- train(Species ~ ., method="rpart", data=training) ## rpart is R's method for creating decision trees
library(rattle)
fancyRpartPlot(modFit$finalModel) ## nicer looking plot
split1.1 <- split(training, Petal.Length<2.5)[[1]]
split1.1 <- split(training, training$Petal.Length<2.5)[[1]]
split1.2 <- split(training, training$Petal.Length<2.5)[[2]]
head(split1.1,10)
head(split1.2,10)
head(training,10)
table(iris$Species)
table(training$Species)
table(split1.1$Species)
table(split1.2$Species)
split2.1 <- split(split1.1, split1.1$Petal.Width<1.6)[[1]]
split2.2 <- split(split1.1, split1.1$Petal.Width<1.6)[[2]]
head(split2.1)
table(split2.1$Species)
head(split2.2)
table(split2.2$Species)
bootstrap1 <- training[sample(nrow(training),size=nrow(training),replace=TRUE),]
split1.1 <- split(bootstrap1, bootstrap1$Petal.Length < 2.6)[[1]]
table(split1.1$Species)
split1.2 <- split(bootstrap1, bootstrap1$Petal.Length < 2.6)[[2]]
table(split1.2$Species)
available.for.split <- sample(names(split1.1)[1:4], size = 4, replace = TRUE)
available.for.split
available.for.split <- sample(names(split1.1)[1:4], size = 4, replace = TRUE)
available.for.split
available.for.split <- sample(names(split1.1)[1:4], size = 4, replace = TRUE)
available.for.split
available.for.split <- sample(names(split1.1)[1:4], size = 4, replace = TRUE)
available.for.split
read.csv(file = "https://civicdb.org/downloads/nightly/nightly-ClinicalEvidenceSummaries.tsv", sep = "\t")
evidence <- read.csv(file = "https://civicdb.org/downloads/nightly/nightly-ClinicalEvidenceSummaries.tsv", sep = "\t")
dim(evidence)
names(evidence)
"H773_V774insAH" %in% evidence$variant
filter(evidence, gene=="EGFR")
library(dplyr)
filter(evidence, gene=="EGFR")
unique(filter(evidence, gene=="EGFR"))
unique(filter(evidence, gene=="EGFR"))$variant
sort(unique(filter(evidence, gene=="EGFR"))$variant)
sort(unique(filter(evidence, gene=="MYC"))$variant)
sort(unique(filter(evidence, gene=="MYC")))
unique(filter(evidence, gene=="MYC"))
sort(unique(filter(evidence, gene=="FGFR3"))$variant)
unique(filter(evidence, gene=="FGFR3"))
unique(filter(evidence, gene=="KRAS"))
unique(filter(evidence, gene=="KRAS"))$variant
sort(unique(filter(evidence, gene=="FGFR3")$variant))
sort(unique(filter(evidence, gene=="KRAS")$variant))
unique(filter(evidence, gene=="KRAS" & variant =="Q61R"))
unique(filter(evidence, gene=="KRAS" & variant =="Q61*"))
unique(filter(evidence, gene=="KRAS" & variant =="Q61.*"))
unique(filter(evidence, gene=="KRAS" & variant =="Q61*"))
unique(filter(evidence, gene=="KRAS" & variant =="Q61"))
rm(list=ls())
getwd()
setwd("GitHub/cancer-trial-match")
rmarkdown::render("trialMatchDataRefresh.Rmd")
rmarkdown::render("trialMatchDataRefresh.Rmd")
head(edges)
shortest.KRAS.AKT1.path$epath[[1]]
edges <- as_data_frame(pathwaysInCancer.igraph, what = c("edges"))
names(edges)
# keep edge IDs fur use in graph analysis
edges <- unique(dplyr::select(edges, "from"="entry1symbol", "to"="entry2symbol",edgeID, specific_subtype, tooltip))
## unnest the from and to columns
edges$from <- strsplit(edges$from, split = ",")
edges <- unnest(edges, cols = "from")
edges$to <- strsplit(edges$to, split = ",")
edges <- unnest(edges, cols = "to")
## convert back to dataframe
edges <- as.data.frame(edges)
head(edges)
rownames(head(edges))
KRASdownstreamNodes
E(graph)
## create as a table in database
dbWriteTable(conn = con,name = "edges", value = edges, overwrite=TRUE)
## check it has saved
dbListTables(con)
head(as_data_frame(pathwaysInCancer.igraph, what = c("edges")))
rmarkdown::render("trialMatchDataRefresh.Rmd")
locations <- unique(dplyr::select(cancerStudies, postcode))
locations$latitude <- NA
locations$longitude <- NA
dim(locations)
for(i in 1:nrow(locations)) {
postcode <- locations$postcode[i]
tryCatch({
lat = postcode_lookup(postcode)$latitude
locations$latitude[i] <- lat
long = postcode_lookup(postcode)$longitude
locations$longitude[i] <- long
}, error=function(cond) {return(NA)})
}
head(locations)
?str_squish
for(i in 1:nrow(locations)) {
postcode <- str_squish(locations$postcode[i])
tryCatch({
lat = postcode_lookup(postcode)$latitude
locations$latitude[i] <- lat
long = postcode_lookup(postcode)$longitude
locations$longitude[i] <- long
}, error=function(cond) {return(NA)})
}
unique(cancerStudies$locations )
head(cancerStudies)
data("world.cities")
cancerStudies$locations <- gsub(pattern = ",.*", replacement = "", x=cancerStudies$locations)
world.cities.country <- configuration$world.cities.country
world.cities.country
cities <- world.cities %>% filter(country.etc == world.cities.country)
unique(cities)
merge(x=cancerStudies, by.x="locations", all.x=TRUE, y=dplyr::select(cities, name, lat, long), by.y="name")
test <- merge(x=cancerStudies, by.x="locations", all.x=TRUE, y=dplyr::select(cities, name, lat, long), by.y="name")
names(test)
nrow(test)
nrow(filter(test, !is.na(test$lat)))
11414/13265
cancerStudies <- merge(x=cancerStudies, by.x="locations", all.x=TRUE, y=dplyr::select(cities, name, lat, long), by.y="name")
length(unique(cancerStudies$nct_id))
length(unique(cancerStudies$nct_id[!is.na(cancerStudies$lat)]))
326/356
rmarkdown::render("trialMatchDataRefresh.Rmd")
rmarkdown::render("trialMatchDataRefresh.Rmd")
cancerStudies$locations[is.na(cancerStudies$lat)]
unique(cancerStudies$locations[is.na(cancerStudies$lat)])
locations <- unique(dplyr::select(cancerStudies, postcode))
locations$postcode.lat <- NA
locations$postcode.long <- NA
locations
for(i in 1:nrow(locations)) {
postcode <- locations$postcode[i]
tryCatch({
lat = postcode_lookup(postcode)$latitude
locations$postcode.lat[i] <- lat
long = postcode_lookup(postcode)$longitude
locations$postcode.long[i] <- long
}, error=function(cond) {return(NA)})
}
locations
for(i in 1:nrow(locations)) {
postcode <- str_squish(locations$postcode[i])
tryCatch({
lat = postcode_lookup(postcode)$latitude
locations$postcode.lat[i] <- lat
long = postcode_lookup(postcode)$longitude
locations$postcode.long[i] <- long
}, error=function(cond) {return(NA)})
}
locations
names(locations)
merge(x=cancerStudies, by.x="postcode", all.x=TRUE, y =locations, by.y ="postcode")
cancerStudies <- merge(x=cancerStudies, by.x="postcode", all.x=TRUE, y =locations, by.y ="postcode")
View(cancerStudies)
is.na(cancerStudies$postcode.lat)
!is.na(cancerStudies$postcode.lat)
cancerStudies$lat[!is.na(cancerStudies$postcode.lat)] <- cancerStudies$postcode.lat[!is.na(cancerStudies$postcode.lat)]
cancerStudies$long[!is.na(cancerStudies$postcode.long)] <- cancerStudies$postcode.long[!is.na(cancerStudies$postcode.long)]
rmarkdown::render("trialMatchDataRefresh.Rmd")
plumber::plumb(file='~/GitHub/Trail-finder-API/trialFinder/trialFinderAPI.R')$run()
rm(list=ls())
getwd()
rmarkdown::render("trialMatchDataRefresh.Rmd")
plumber::plumb(file='cancerTrialMatchAPI/plumber.R')$run()
plumb(file='cancerTrialMatchAPI/plumber.R')$run()
getwd()
read.table(file = "conditionMatches.tsv", sep = "\t", header = TRUE)
plumb(file='cancerTrialMatchAPI/plumber.R')$run()
plumb(file='cancerTrialMatchAPI/plumber.R')$run()
read.table(file = "cancerStudies.tsv", sep = "\t", header = TRUE)
plumb(file='cancerTrialMatchAPI/plumber.R')$run()
View(cancerStudies)
View(cancerStudies)
plumb(file='cancerTrialMatchAPI/plumber.R')$run()
plumb(file='~/GitHub/Trail-finder-API/trialFinder/trialFinderAPI.R')$run()
plumb(file='~/GitHub/Trail-finder-API/trialFinder/trialFinderAPI.R')$run()
plumb(file='cancerTrialMatchAPI/plumber.R')$run()
plumb(file='cancerTrialMatchAPI/plumber.R')$run()
plumb(file='cancerTrialMatchAPI/plumber.R')$run()
plumb(file='cancerTrialMatchAPI/plumber.R')$run()
plumb(file='cancerTrialMatchAPI/plumber.R')$run()
plumb(file='cancerTrialMatchAPI/plumber.R')$run()
plumb(file='cancerTrialMatchAPI/plumber.R')$run()
getwd()
read.table(file = paste0(parentDir, "cancerStudies.tsv", sep = "/"), sep = "\t", header = TRUE)
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
strsplit(x="Anal,Solid", split = ",")
unlist(strsplit(x="Anal,Solid", split = ","))
plumb(file='plumber.R')$run()
condition <- "Anal,Solid"
plumb(file='plumber.R')$run()
condition <- unlist(strsplit(condition, split = ","))
condition
condition <- str_squish(condition)
plumb(file='plumber.R')$run()
dplyr::filter(cancerStudies, TARGET.condition %in% condition)
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
studies <- read.table(file = "cancerStudies.tsv", sep = "\t", header = TRUE)
## subset studies table for matching condition
studies <- studies[ studies$TARGET.condition %in% condition, ]
head(studies)
dbConnect("trialMatchData.sqlite", ":memory:")
?dbConnect
file.exists("trialMatchData.sqlite")
dbConnect("trialMatchData.sqlite")
sqlite <- dbDriver("SQLite")
dbConnect(sqlite,"trialMatchData.sqlite")
dbDisconnect()
driver <- dbDriver("SQLite")
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
driver <- dbDriver("SQLite")
con <- dbConnect(driver,"trialMatchData.sqlite")
dbListTables(con)
plumb(file='plumber.R')$run()
condition
names(cancerStudies)
paste("SELECT * FROM cancerStudies WHERE TARGET.condition = ", condition)
query <- paste("SELECT * FROM cancerStudies WHERE TARGET.condition = ", condition)
dbSendQuery(con, query)
query <- paste("SELECT * FROM cancerStudies WHERE TARGET.condition = '", condition, "'")
query
dbSendQuery(con, query)
dbSendQuery(con, query[1])
dbSendQuery(con, "SELECT * FROM cancerStudies WHERE TARGET.condition = 'Anal'")
dbListTables(con)
dbSendQuery(con, "SELECT * FROM cancerStudies")
dbSendQuery(con, "SELECT DISTINCT(nct_id) FROM cancerStudies")
dbSendQuery(con, "SELECT nct_id FROM cancerStudies")
res <- dbSendQuery(con, "SELECT nct_id FROM cancerStudies")
dbFetch(res)
query
res <- dbSendQuery(con, "SELECT * FROM cancerStudies")
dbFetch(res)
res <- dbSendQuery(con, "SELECT * FROM cancerStudies WHERE TARGET.condition = 'Colorectal'")
dbFetch(res)
dbReadTable(con, "cancerStudies")
class(dbReadTable(con, "cancerStudies"))
names(dbReadTable(con, "cancerStudies"))
res <- dbSendQuery(con, "SELECT * FROM cancerStudies WHERE nct_id = 'NCT03037385'")
dbFetch(res)
View(conditionSynonyms)
gsub(pattern = "\\.", replacement = "_", x=names(conditionSynonyms))
names(conditionSynonyms) <- gsub(pattern = "\\.", replacement = "_", x=names(conditionSynonyms))
names(conditionSynonyms)
rmarkdown::render("trialMatchDataRefresh.Rmd")
fromJSON(file = "trialMatchConfiguration.json")
rjson::fromJSON(file = "trialMatchConfiguration.json")
rmarkdown::render("trialMatchDataRefresh.Rmd")
rmarkdown::render("trialMatchDataRefresh.Rmd")
condition
condition <- "Anal"
query <- paste("SELECT * FROM cancerStudies WHERE TARGET_condition = '", condition, "'")
query
studies <- dbSendQuery(con, query)
dbFetch(res)
studies <- dbSendQuery(con, query)
dbFetch(studies)
driver <- dbDriver("SQLite")
con <- dbConnect(driver,"trialMatchData.sqlite")
studies <- dbSendQuery(con, query)
dbFetch(studies)
query
query <- paste("SELECT * FROM cancerStudies WHERE TARGET_condition ='", trimws(condition), "'")
query
query <- paste("SELECT * FROM cancerStudies WHERE TARGET_condition ='", trimws(condition), "'", sep = "")
query
studies <- dbSendQuery(con, query)
dbFetch(studies)
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
dbDisconnect(con)
dbClearResult(res)
dbClearResult(studies)
dbGetQuery(con, query)
driver <- dbDriver("SQLite")
con <- dbConnect(driver,"trialMatchData.sqlite")
dbGetQuery(con, query)
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
query <- "SELECT * FROM cancerStudies WHERE TARGET_condition ='Anal'"
dbGetQuery(con, query)
query <- "SELECT * FROM cancerStudies WHERE TARGET_condition ='Anal', 'Solid'"
dbGetQuery(con, query)
query <- "SELECT * FROM cancerStudies WHERE TARGET_condition IN 'Anal', 'Solid'"
dbGetQuery(con, query)
query <- "SELECT * FROM cancerStudies WHERE TARGET_condition IN ('Anal', 'Solid')"
dbGetQuery(con, query)
condition <- "Anal,Solid"
condition
condition <- unlist(strsplit(condition, split = ","))
## trim whitespace
condition <- str_squish(condition)
condition
paste(condition, collapse = ",")
paste0("\'",paste(condition, collapse = "\',\'"), "\'")
paste0("'",paste(condition, collapse = "','"), "'")
condition <- paste0("'",paste(condition, collapse = "','"), "'")
paste("SELECT * FROM cancerStudies WHERE TARGET_condition IN ", trimws(condition))
query <- paste("SELECT * FROM cancerStudies WHERE TARGET_condition IN ", condition)
query
dbGetQuery(con, query)
query <- paste0("SELECT * FROM cancerStudies WHERE TARGET_condition IN (", condition, ")")
query
dbGetQuery(con, query)
plumb(file='plumber.R')$run()
condition <- "Anal, Solid"
condition <- unlist(strsplit(condition, split = ","))
## trim whitespace, if any
condition <- str_squish(condition)
## collapse for SQL query
condition <- paste0("('",paste(condition, collapse = "','"), "')")
condition
query <- paste0("SELECT * FROM cancerStudies WHERE TARGET_condition IN ", condition)
query
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
names(edges)
dbListTables(con)
plumb(file='plumber.R')$run()
getwd()
rmarkdown::render("trialMatchDataRefresh.Rmd")
