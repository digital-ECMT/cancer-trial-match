mutation.eligibilities <- indexOnPattern(eligibilities = eligibilities, pattern = "mutat|mutant|defect|deficien|alter|loss of function|loss-of-function", wordRange = 6, featureLabel = "mutation")
## preview
formattable(head(mutation.eligibilities))
## NOT USED BECAUSE SUPERCEDED BY INDEX ON REARRANGEMENTS
fusion.eligibilities <- indexOnPattern(eligibilities = eligibilities, pattern = " fusion|rearrangement", wordRange = 7, featureLabel = "fusion")
## preview
formattable(head(fusion.eligibilities))
rearrangement.eligibilities <- indexOnPattern(eligibilities = eligibilities, pattern = " fusion|rearrangement|truncation|truncated|deletion|deleted|lost|duplication|duplicated", wordRange = 6, featureLabel = "rearrangement")
## preview
formattable(head(rearrangement.eligibilities))
## NOTE USE WORD RANGE OF 2 FOR LOSS, OTHERWISE GET TOO MANY FALSE HITS (including "loss of function" etc, which is indexed as a mutation)
loss.eligibilities <- indexOnPattern(eligibilities = eligibilities, pattern = "loss", wordRange = 2, featureLabel = "loss")
## preview
formattable(head(loss.eligibilities))
amplification.eligibilities <- indexOnPattern(eligibilities = eligibilities, pattern = " amplification|overexpression", wordRange = 5, featureLabel = "amplification")
## preview
formattable(head(amplification.eligibilities))
## create a copy of eligibilities
therapy.eligibilities <- eligibilities
## filter to retain criteria with mention of "previous|prior"
# define pattern
therapyFilter <- "previous therapy|prior therapy|previous treatment|prior treatment"
# filter
therapy.eligibilities <- therapy.eligibilities[grep(pattern = therapyFilter, ignore.case = TRUE, x=therapy.eligibilities$criteria), ]
# set value for feature
therapy.eligibilities$feature <- "PRIOR_THERAPY"
## drop redundant rows, if any
therapy.eligibilities <- unique(therapy.eligibilities)
## since prior therapies tend to be a mixture of 2-word synonyms, 3-word synonyms etc, plus parent terms, best approach for now is to not try and match against a therapy
# add a controlled.match column for row binding only
therapy.eligibilities$controlled.match <- NA
## instead, in the UI, just show inclusion and exclusion criteria (separately) related to prior therapies
formattable(head(therapy.eligibilities))
# indexed.eligibilities <- unique(rbind(mutation.eligibilities, fusion.eligibilities,  amplification.eligibilities, therapy.eligibilities))
indexed.eligibilities <- unique(rbind(mutation.eligibilities, rearrangement.eligibilities, loss.eligibilities, amplification.eligibilities, therapy.eligibilities))
## preview
#formattable(head(indexed.eligibilities))
## create as a table in database
dbWriteTable(conn = con,name = "indexedEligibility", value = indexed.eligibilities, overwrite=TRUE)
## check it has saved
dbListTables(con)
## download KGML file for Pathways In Cancer as KGML file
pathwaysInCancer_KGML <- get_KGML("hsa05200")
#class(pathwaysInCancer_KGML)
## expand mappings
pathwaysInCancer_mappings <- expand_KEGG_mappings(pathwaysInCancer_KGML, convert_KEGG_IDs = FALSE)
pathwaysInCancer_mappings <- expand_KEGG_mappings(pathwaysInCancer_KGML)
pathwaysInCancer_edges <- expand_KEGG_edges(pathwaysInCancer_KGML, pathwaysInCancer_mappings)
## create a simple edgelist
edgelist <- unique(dplyr::select(pathwaysInCancer_edges, "from"="entry1symbol", "to"="entry2symbol", specific_subtype, value))
#Modify existing data sets; specify as nodes and edges
pathwaysInCancer_node_mapping_info <- node_mapping_info(pathwaysInCancer_mappings)
pathwaysInCancer_edge_mapping_info <- edge_mapping_info(pathwaysInCancer_edges)
#Create an igraph object
pathwaysInCancer.igraph <- get_graph_object(pathwaysInCancer_node_mapping_info, pathwaysInCancer_edge_mapping_info)
## get edgelist
edges <- as_data_frame(pathwaysInCancer.igraph, what = c("edges"))
## retain only edges where "from" is a gene
edges <- unique(dplyr::filter(edges, entry1type=="gene"))
## drop unnecessary columns
# keep edge IDs fur use in graph analysis
edges <- unique(dplyr::select(edges, "from"="entry1symbol", "to"="entry2symbol",edgeID, specific_subtype, tooltip))
## unnest the from and to columns
edges$from <- strsplit(edges$from, split = ",")
edges <- unnest(edges, cols = "from")
edges$to <- strsplit(edges$to, split = ",")
edges <- unnest(edges, cols = "to")
## convert back to dataframe
edges <- as.data.frame(edges)
## preview
formattable(head(edges))
## create as a table in database
dbWriteTable(conn = con,name = "edges", value = edges, overwrite=TRUE)
## check it has saved
dbListTables(con)
targetMatches <- unique(dplyr::select(cancerStudies, nct_id, interventions))
targetMatches <- merge(x=targetMatches, by.x="interventions", y=drugs.targets, by.y="interventions.verbatim" )
targetMatches <- targetMatches[!is.na(targetMatches$drugTargetSymbol), ]
targetMatches <- unique(dplyr::select(targetMatches, nct_id, interventions.processed, drugTargetSymbol))
targetMatches$intervention_rationale <- paste0("Study drug (", targetMatches$interventions.processed, ") targets ", targetMatches$drugTargetSymbol)
targetMatches <- unique(dplyr::select(targetMatches, -interventions.processed))
targetMatches$symbol <- targetMatches$drugTargetSymbol
targetMatches <- dplyr::select(targetMatches, -drugTargetSymbol)
targetMatches$intervention_score <- 2
pathwayMatches <- unique(dplyr::select(cancerStudies, nct_id, interventions))
pathwayMatches <- merge(x=pathwayMatches, by.x="interventions", y=drugs.targets, by.y="interventions.verbatim" )
pathwayMatches <- pathwayMatches[!is.na(pathwayMatches$drugTargetSymbol), ]
pathwayMatches <- unique(dplyr::select(pathwayMatches, nct_id, interventions.processed, drugTargetSymbol))
pathwayMatches <- merge(x=pathwayMatches, by.x="drugTargetSymbol", y=edges, by.y="to")
pathwayMatches <- unique(dplyr::select(pathwayMatches,nct_id, interventions.processed, "downstream"="drugTargetSymbol","upstream"="from" ))
pathwayMatches <- as.data.frame(pathwayMatches %>%
group_by(nct_id, interventions.processed, upstream) %>%
summarise(
downstream = paste(unique(downstream), collapse = ", ")
))
paste0("Study drug (", pathwayMatches$interventions.processed, ") targets downstream gene(s) (", pathwayMatches$downstream, ")")
unique(dplyr::select(cancerStudies, nct_id, interventions))
pathwayMatches <- unique(dplyr::select(cancerStudies, nct_id, interventions))
merge(x=pathwayMatches, by.x="interventions", y=drugs.targets, by.y="interventions.verbatim" )
pathwayMatches <- merge(x=pathwayMatches, by.x="interventions", y=drugs.targets, by.y="interventions.verbatim" )
pathwayMatches[!is.na(pathwayMatches$drugTargetSymbol), ]
pathwayMatches <- pathwayMatches[!is.na(pathwayMatches$drugTargetSymbol), ]
unique(dplyr::select(pathwayMatches, nct_id, interventions.processed, drugTargetSymbol))
pathwayMatches <- unique(dplyr::select(pathwayMatches, nct_id, interventions.processed, drugTargetSymbol))
merge(x=pathwayMatches, by.x="drugTargetSymbol", y=edges, by.y="to")
View(edges)
head(pathwayMatches)
View(drugs.targets)
View(targets)
targets$drugTargetID[i]
targets$drugTargetID[1]
i <- 1
targets$drugTargetID[i]
keggGet(targetId)[[1]]$NAME[1]},
error=function(cond) {return(NA)})
keggGet(targetId)[[1]]$NAME[1]
keggGet(targetId)[[1]]
keggGet(targetId)[[1]]$SYMBOL[1]
i <- 12
targets$drugTargetID[i]
keggGet(targetId)[[1]]$SYMBOL[1]
keggGet("hsa:238")[[1]]$SYMBOL[1]
keggGet("hsa:2099")[[1]]$SYMBOL[1]
keggGet("hsa:207")[[1]]$SYMBOL[1]
name <- keggGet("hsa:207")[[1]]$SYMBOL[1]
name
strsplit(name, split = ", ")
unlist(strsplit(name, split = ", "))
class(unlist(strsplit(name, split = ", ")))
strsplit(name, split = ", ")[1]
strsplit(name, split = ", ")[[1]
}
strsplit(name, split = ", ")[[1]]
strsplit(name, split = ", ")[[1]][1]
rm(list = ls())
rmarkdown::render("trialMatchDataRefresh.Rmd")
View(indexed.eligibilities)
View(eligibilities)
conn2 <- dbConnect(drv, dbname="aact",host="aact-db.ctti-clinicaltrials.org", port=5432, user=aact.username, password=aact.password )
eligibilities2 <- dbGetQuery(conn2,getEligibilities)
i <- 1
criteria <- as.character(eligibilities$criteria[i])
criteria
unlist(strsplit(criteria, split = "\r\n\r\n"))
criteria <- as.character(eligibilities2$criteria[i])
criteria
unlist(strsplit(criteria, split = "\n\n"))
rmarkdown::render("trialMatchDataRefresh.Rmd")
rmarkdown::render("trialMatchDataRefresh.Rmd")
conn2 <- dbConnect(drv, dbname="aact",host="aact-db.ctti-clinicaltrials.org", port=5432, user=aact.username, password=aact.password )
i <- 1
criteria <- as.character(eligibilities2$criteria[i])
eligibilities2 <- dbGetQuery(conn2,getEligibilities)
criteria <- as.character(eligibilities2$criteria[i])
criteria
unlist(strsplit(criteria, split = "\n\n"))
names(eligibilities2)
criteria <- as.character(eligibilities2$criteria[eligibilities2$nct_id == "NCT03875820"])
criteria
unlist(strsplit(criteria, split = "\n\n"))
unlist(strsplit(criteria, split = "\n"))
strsplit(criteria, split = "\n")
unlist(strsplit(criteria, split = "\n"))
criteria <- unlist(strsplit(criteria, split = "\n"))
criteria
criteria[criteria != ""]
criteria <- criteria[criteria != ""] ## drop empty elements
class(criteria)
length(criteria)
criteria
dbDisconnect(conn2)
rmarkdown::render("trialMatchDataRefresh.Rmd")
rmarkdown::render("trialMatchDataRefresh.Rmd")
rmarkdown::render("trialMatchData_getResults.Rmd")
dbListTables(con)
conditionSynonyms <- dbGetQuery(con, "SELECT * FROM cancers")
humanGenes <- dbGetQuery(con, "SELECT * FROM genes")
View(humanGenes)
## jsonlite is MIT
configuration <- jsonlite::fromJSON(txt = "trialMatchConfiguration.json")
aact.username <- configuration$aact.username
aact.password <- configuration$aact.password
## connect via RPostgres (GPL-3 licence)
drv = RPostgres::Postgres()
conn2 <- dbConnect(drv, dbname="aact",host="aact-db.ctti-clinicaltrials.org", port=5432, user=aact.username, password=aact.password )
cancerStudiesResults_query <- "SELECT s.nct_id, s.brief_title, c.name AS condition, i.name AS interventions
FROM studies s
INNER JOIN conditions c ON c.nct_id = s.nct_id
INNER JOIN interventions i ON i.nct_id = s.nct_id
inner join calculated_values cv on cv.nct_id = s.nct_id
WHERE s.study_type LIKE ('Interventional')
and (c.downcase_name like '%cancer%'
or c.downcase_name like '%neoplasm%'
or c.downcase_name like '%carcinoma%'
or c.downcase_name like '%tumo%')"
## get data from clinicaltrials.gov
cancerStudiesResults <- dbGetQuery(conn2,cancerStudiesResults_query)
## add a column to indicate refresh date
cancerStudiesResults$Refresh.date <- today
names(conditionSynonyms)
head(conditionSynonyms)
names(cancerStudiesResults)
head(unique(cancerStudiesResults$condition))
head(unique(cancerStudiesResults$condition), 30)
"Colo-rectal Cancer" %in% conditionSynonyms$condition.synonyms
names(cancerStudiesResults)
custom_tokens <- unique(conditionSynonyms$condition.synonyms)
length(custom_tokens)
custom_tokens
head(as.list(corpus::text_tokens(x=cancerStudiesResults$condition,                                                filter= corpus::text_filter(combine = custom_tokens, map_case=FALSE, connector="_", drop_punct=TRUE ))), 40)
head(as.list(corpus::text_tokens(x=cancerStudiesResults$condition,                                                filter= corpus::text_filter(combine = custom_tokens, map_case=TRUE, connector="_", drop_punct=TRUE ))), 40)
"lung cancer" %in% conditionSynonyms$condition.synonyms
View(conditionSynonyms)
cancerStudiesResults$word <- as.list(corpus::text_tokens(x=cancerStudiesResults$condition,                                                filter= corpus::text_filter(combine = custom_tokens, map_case=TRUE, connector="_", drop_punct=TRUE )))
cancerStudiesResults <- as.data.frame(unnest(data = cancerStudiesResults, word))
cancerStudiesResults$word <- gsub(pattern = "_", replacement = " ", x=cancerStudiesResults$word)
View(cancerStudiesResults)
names(conditionSynonyms)
head(unique(merge(x=cancerStudiesResults, by.x = "word", y=conditionSynonyms, by.y="condition.synonyms")))
cancerStudiesResults <- unique(merge(x=cancerStudiesResults, by.x = "word", y=conditionSynonyms, by.y="condition.synonyms"))
View(cancerStudiesResults)
nemas(unique(dplyr::select(cancerStudiesResults, -c(word))))
names(unique(dplyr::select(cancerStudiesResults, -c(word))))
cancerStudiesResults <- unique(dplyr::select(cancerStudiesResults, -c(word)))
View(conditionSynonyms)
View(cancerStudiesResults)
qplot(unique(cancerStudiesResults$controlled.cancer.type))
library(ggplot2)
qplot(unique(cancerStudiesResults$controlled.cancer.type))
qplot(cancerStudiesResults$controlled.cancer.type)
dbListTables(con)
tic("download, parse and write NCI thesaurus to file")
## specify URL for NCI thesaurus - this should always be the most recent?
NCItURL <- "https://evs.nci.nih.gov/ftp1/NCI_Thesaurus/Thesaurus.FLAT.zip"
destFlatFilename <- "NCIt_FLAT.zip"
download.file(url=NCItURL,destfile = destFlatFilename)
unzip(zipfile = paste0(getwd(),"/",destFlatFilename))
NCIt <- read.table("Thesaurus.txt",header = FALSE, sep = "\t", comment.char = "", fill = TRUE, stringsAsFactors = FALSE, quote = "")
names(NCIt) <- c("ID","URL","ParentID","Synonyms","Description","PreferredTerm","Type","Class")
## a drug may have more than one class, so need to multiply rows
## split and unnest the Class column of NCIt
NCIt$Class <- strsplit(NCIt$Class, split = "\\|")
NCIt <- unnest(data = NCIt, Class)
## subset to retain only relevant classes
NCItPharmacologics <- NCIt[which(NCIt$Class %in% c("Pharmacologic Substance","Amino Acid, Peptide, or Protein","Immunologic Factor","Clinical Drug","Therapeutic or Preventive Procedure", "Health Care Activity")), ]
## additional classes related to prior therapy
#  "Therapeutic or Preventive Procedure", "Health Care Activity"
## one drug can have more than one parent, so need to split into multiple rows...
## split ParentID column on pipe symbol
NCItPharmacologics$ParentID <- strsplit(NCItPharmacologics$ParentID, split = "\\|")
## unnest the ID column to multiply rows
NCItPharmacologics <- unnest(data=NCItPharmacologics,ParentID)
## join parent synonyms
## first, get the synonyms and IDs for parents
NCItParents <- NCIt[which(NCIt$ID %in% NCItPharmacologics$ParentID), which(names(NCIt) %in% c("ID", "Synonyms"))]
## each parent term may have more than one synonym
## for simplicity, we will retain only the first synonym for each parent term
NCItParents$Synonyms <- gsub("\\|.*","",NCItParents$Synonyms)
## merge parents on entity ID = parent ID
NCItPharmacologics <- merge(x=NCItPharmacologics,y=NCItParents,by.x="ParentID",by.y="ID",all.x=TRUE)
## reorder and rename
NCItPharmacologics <- dplyr::select(NCItPharmacologics,ID,Class,PreferredTerm,Synonyms="Synonyms.x",Description,ParentTerm="Synonyms.y",ParentID)
## split the Synonyms column on pipe symbol
NCItPharmacologics$Synonyms <- strsplit(NCItPharmacologics$Synonyms, split="\\|")
## unnest the Synonyms column to multiply rows
NCItPharmacologics <- unnest(data = NCItPharmacologics,Synonyms)
## add a column with lower case drug synonyms for joining
NCItPharmacologics$SynonymsLower <- tolower(NCItPharmacologics$Synonyms)
## convert from tibble to data frame
NCIthesaurus <- as.data.frame(NCItPharmacologics)
## add a column to indicate date downloaded
NCIthesaurus$downloaded <- Sys.Date()
## drop redundant rows, if any
NCIthesaurus <- unique(NCIthesaurus)
toc()
## create as a table in database
dbWriteTable(conn = con,name = "NCIt", value = NCIthesaurus, overwrite=TRUE)
rm(NCIthesaurus)
rm(NCIt)
rm(NCItParents)
rm(NCItPharmacologics)
rm(NCItURL)
NCIthesaurus <- dbGetQuery(con, "SELECT * FROM NCIt")
View(NCIthesaurus)
names(cancerStudiesResults)
head(unique(dplyr::select(cancerStudiesResults,interventions)))
head(unique(dplyr::select(cancerStudiesResults,interventions)),30)
head(NCIthesaurus)
unique(NCIthesaurus$Class)
View(NCIthesaurus)
names(NCIthesaurus)
head(unique(dplyr::select(cancerStudiesResults,interventions)),30)
drugs.targets <- unique(dplyr::select(cancerStudiesResults,interventions))
drugs.targets$interventions.processed <- drugs.targets$interventions
## split and unnest on " + "
drugs.targets$interventions.processed <- strsplit(drugs.targets$interventions.processed, split = " \\+ ")
drugs.targets <- unnest(data = drugs.targets, interventions.processed)
# also split and unneston the word " plus "
drugs.targets$interventions.processed <- strsplit(drugs.targets$interventions.processed, split = " plus ")
drugs.targets <- unnest(data = drugs.targets, interventions.processed)
# also split and unneston the word " and "
drugs.targets$interventions.processed <- strsplit(drugs.targets$interventions.processed, split = " and ")
drugs.targets <- unnest(data = drugs.targets, interventions.processed)
# also split and unnest on  " & "
drugs.targets$interventions.processed <- strsplit(drugs.targets$interventions.processed, split = " \\& ")
drugs.targets <- unnest(data = drugs.targets, interventions.processed)
# also split and unnest on  " or "
drugs.targets$interventions.processed <- strsplit(drugs.targets$interventions.processed, split = " or ")
drugs.targets <- unnest(data = drugs.targets, interventions.processed)
# also split and unnest on  " (+) "
drugs.targets$interventions.processed <- strsplit(drugs.targets$interventions.processed, split = " \\(\\+\\) ")
drugs.targets <- unnest(data = drugs.targets, interventions.processed)
# also split and unnest on  " with "
drugs.targets$interventions.processed <- strsplit(drugs.targets$interventions.processed, split = " with ")
drugs.targets <- unnest(data = drugs.targets, interventions.processed)
## also split on brackets
drugs.targets$interventions.processed <- strsplit(drugs.targets$interventions.processed, split = " \\(")
drugs.targets <- unnest(data = drugs.targets, interventions.processed)
# remove closing bracket
drugs.targets$interventions.processed <- gsub(pattern = "\\)", replacement = "", x=drugs.targets$interventions.processed)
## trim off anything related to dose
# pattern is (a number, with or without a decimal point) with/without a space, followed by "mg", anything after "mg is removed
drugs.targets$interventions.processed <- gsub(pattern = " \\d+\\.?\\d+ ?mg.*", replacement = "", x=drugs.targets$interventions.processed, ignore.case = T)
head(drugs.targets,30)
drugs.targets <- as.data.frame(drugs.targets)
head(drugs.targets,30)
drugs.targets$interventions.processed <- tolower(drugs.targets$interventions.processed)
head(drugs.targets,30)
names(NCIthesaurus)
## join to NCIthesaurus so that any intervention not represented in the thesaurus is dropped
drugs.targets <- merge(x=drugs.targets,
by.x = "interventions.processed",
y= unique(dplyr::select(NCIthesaurus, SynonymsLower, Description, ParentTerm)),
by.y = "SynonymsLower")
head(drugs.targets,30)
names(NCIthesaurus)
## first, get all interventions (note that there will be some redundancy due to case)
drugs.targets <- unique(dplyr::select(cancerStudiesResults,interventions))
## keep interventions column as verbatim so can join later
## make a duplicate column
drugs.targets$interventions.processed <- drugs.targets$interventions
## split and unnest on " + "
drugs.targets$interventions.processed <- strsplit(drugs.targets$interventions.processed, split = " \\+ ")
drugs.targets <- unnest(data = drugs.targets, interventions.processed)
# also split and unneston the word " plus "
drugs.targets$interventions.processed <- strsplit(drugs.targets$interventions.processed, split = " plus ")
drugs.targets <- unnest(data = drugs.targets, interventions.processed)
# also split and unneston the word " and "
drugs.targets$interventions.processed <- strsplit(drugs.targets$interventions.processed, split = " and ")
drugs.targets <- unnest(data = drugs.targets, interventions.processed)
# also split and unnest on  " & "
drugs.targets$interventions.processed <- strsplit(drugs.targets$interventions.processed, split = " \\& ")
drugs.targets <- unnest(data = drugs.targets, interventions.processed)
# also split and unnest on  " or "
drugs.targets$interventions.processed <- strsplit(drugs.targets$interventions.processed, split = " or ")
drugs.targets <- unnest(data = drugs.targets, interventions.processed)
# also split and unnest on  " (+) "
drugs.targets$interventions.processed <- strsplit(drugs.targets$interventions.processed, split = " \\(\\+\\) ")
drugs.targets <- unnest(data = drugs.targets, interventions.processed)
# also split and unnest on  " with "
drugs.targets$interventions.processed <- strsplit(drugs.targets$interventions.processed, split = " with ")
drugs.targets <- unnest(data = drugs.targets, interventions.processed)
## also split on brackets
drugs.targets$interventions.processed <- strsplit(drugs.targets$interventions.processed, split = " \\(")
drugs.targets <- unnest(data = drugs.targets, interventions.processed)
# remove closing bracket
drugs.targets$interventions.processed <- gsub(pattern = "\\)", replacement = "", x=drugs.targets$interventions.processed)
## trim off anything related to dose
# pattern is (a number, with or without a decimal point) with/without a space, followed by "mg", anything after "mg is removed
drugs.targets$interventions.processed <- gsub(pattern = " \\d+\\.?\\d+ ?mg.*", replacement = "", x=drugs.targets$interventions.processed, ignore.case = T)
## convert to lowercase
drugs.targets$interventions.processed <- tolower(drugs.targets$interventions.processed)
drugs.targets <- as.data.frame(drugs.targets)
## join to NCIthesaurus so that any intervention not represented in the thesaurus is dropped
drugs.targets <- merge(x=drugs.targets,
by.x = "interventions.processed",
y= unique(dplyr::select(NCIthesaurus, SynonymsLower, Synonyms, PreferredTerm, ParentTerm)),
by.y = "SynonymsLower")
head(drugs.targets,30)
View(drugs.targets)
keggFind(database = "drug", query = "letrozole"))
keggFind(database = "drug", query = "letrozole")
keggFind(database = "drug", query = "LETROZOLE")
keggFind(database = "drug", query = "Letrozole")
## first, get all interventions (note that there will be some redundancy due to case)
drugs.targets <- unique(dplyr::select(cancerStudiesResults,interventions))
## keep interventions column as verbatim so can join later
## make a duplicate column
drugs.targets$interventions.processed <- drugs.targets$interventions
## split and unnest on " + "
drugs.targets$interventions.processed <- strsplit(drugs.targets$interventions.processed, split = " \\+ ")
drugs.targets <- unnest(data = drugs.targets, interventions.processed)
# also split and unneston the word " plus "
drugs.targets$interventions.processed <- strsplit(drugs.targets$interventions.processed, split = " plus ")
drugs.targets <- unnest(data = drugs.targets, interventions.processed)
# also split and unneston the word " and "
drugs.targets$interventions.processed <- strsplit(drugs.targets$interventions.processed, split = " and ")
drugs.targets <- unnest(data = drugs.targets, interventions.processed)
# also split and unnest on  " & "
drugs.targets$interventions.processed <- strsplit(drugs.targets$interventions.processed, split = " \\& ")
drugs.targets <- unnest(data = drugs.targets, interventions.processed)
# also split and unnest on  " or "
drugs.targets$interventions.processed <- strsplit(drugs.targets$interventions.processed, split = " or ")
drugs.targets <- unnest(data = drugs.targets, interventions.processed)
# also split and unnest on  " (+) "
drugs.targets$interventions.processed <- strsplit(drugs.targets$interventions.processed, split = " \\(\\+\\) ")
drugs.targets <- unnest(data = drugs.targets, interventions.processed)
# also split and unnest on  " with "
drugs.targets$interventions.processed <- strsplit(drugs.targets$interventions.processed, split = " with ")
drugs.targets <- unnest(data = drugs.targets, interventions.processed)
## also split on brackets
drugs.targets$interventions.processed <- strsplit(drugs.targets$interventions.processed, split = " \\(")
drugs.targets <- unnest(data = drugs.targets, interventions.processed)
# remove closing bracket
drugs.targets$interventions.processed <- gsub(pattern = "\\)", replacement = "", x=drugs.targets$interventions.processed)
## trim off anything related to dose
# pattern is (a number, with or without a decimal point) with/without a space, followed by "mg", anything after "mg is removed
drugs.targets$interventions.processed <- gsub(pattern = " \\d+\\.?\\d+ ?mg.*", replacement = "", x=drugs.targets$interventions.processed, ignore.case = T)
## convert to lowercase
drugs.targets$interventions.processed <- tolower(drugs.targets$interventions.processed)
drugs.targets <- as.data.frame(drugs.targets)
## join to NCIthesaurus so that any intervention not represented in the thesaurus is dropped
drugs.targets <- merge(x=drugs.targets,
by.x = "interventions.processed",
y= unique(dplyr::select(NCIthesaurus, SynonymsLower, PreferredTerm, ParentTerm)),
by.y = "SynonymsLower")
drugs.targets$drugID <- NA
names(drugs.targets)
tic("get IDs for drugs")
for(i in 1:nrow(drugs.targets)) {
print(i)
drugid <- NA
drugSynonym <- as.character(drugs.targets$interventions.processed[i])
print(drugSynonym)
## get (onlY) first drug ID
tryCatch({drugid <- names(keggFind(database = "drug", query = drugSynonym))[1]},
error=function(cond) {return(NA)})
if(length(drugid)>0 ) {
print(drugid)
drugs.targets$drugID[i] <- drugid}
}
toc()
head(drugs.targets)
head(is.na(drugs.targets$PreferredTerm))
head(drugs.targets$PreferredTerm)
drugs.targets$PreferredTerm[drugs.targets$PreferredTerm==""] <- NA
head(drugs.targets$PreferredTerm)
## first, get all interventions (note that there will be some redundancy due to case)
drugs.targets <- unique(dplyr::select(cancerStudiesResults,interventions))
## keep interventions column as verbatim so can join later
## make a duplicate column
drugs.targets$interventions.processed <- drugs.targets$interventions
## split and unnest on " + "
drugs.targets$interventions.processed <- strsplit(drugs.targets$interventions.processed, split = " \\+ ")
drugs.targets <- unnest(data = drugs.targets, interventions.processed)
# also split and unneston the word " plus "
drugs.targets$interventions.processed <- strsplit(drugs.targets$interventions.processed, split = " plus ")
drugs.targets <- unnest(data = drugs.targets, interventions.processed)
# also split and unneston the word " and "
drugs.targets$interventions.processed <- strsplit(drugs.targets$interventions.processed, split = " and ")
drugs.targets <- unnest(data = drugs.targets, interventions.processed)
# also split and unnest on  " & "
drugs.targets$interventions.processed <- strsplit(drugs.targets$interventions.processed, split = " \\& ")
drugs.targets <- unnest(data = drugs.targets, interventions.processed)
# also split and unnest on  " or "
drugs.targets$interventions.processed <- strsplit(drugs.targets$interventions.processed, split = " or ")
drugs.targets <- unnest(data = drugs.targets, interventions.processed)
# also split and unnest on  " (+) "
drugs.targets$interventions.processed <- strsplit(drugs.targets$interventions.processed, split = " \\(\\+\\) ")
drugs.targets <- unnest(data = drugs.targets, interventions.processed)
# also split and unnest on  " with "
drugs.targets$interventions.processed <- strsplit(drugs.targets$interventions.processed, split = " with ")
drugs.targets <- unnest(data = drugs.targets, interventions.processed)
## also split on brackets
drugs.targets$interventions.processed <- strsplit(drugs.targets$interventions.processed, split = " \\(")
drugs.targets <- unnest(data = drugs.targets, interventions.processed)
# remove closing bracket
drugs.targets$interventions.processed <- gsub(pattern = "\\)", replacement = "", x=drugs.targets$interventions.processed)
## trim off anything related to dose
# pattern is (a number, with or without a decimal point) with/without a space, followed by "mg", anything after "mg is removed
drugs.targets$interventions.processed <- gsub(pattern = " \\d+\\.?\\d+ ?mg.*", replacement = "", x=drugs.targets$interventions.processed, ignore.case = T)
## convert to lowercase
drugs.targets$interventions.processed <- tolower(drugs.targets$interventions.processed)
drugs.targets <- as.data.frame(drugs.targets)
## join to NCIthesaurus so that any intervention not represented in the thesaurus is dropped
drugs.targets <- merge(x=drugs.targets,
by.x = "interventions.processed",
y= unique(dplyr::select(NCIthesaurus, SynonymsLower, PreferredTerm, ParentTerm)),
by.y = "SynonymsLower")
## drop any rows that don't have a preferred term
# convert empty cells to NA
drugs.targets$PreferredTerm[drugs.targets$PreferredTerm==""] <- NA
drugs.targets <- unique(drugs.targets[!is.na(drugs.targets$PreferredTerm), ])
nrow(drugs.targets)
length(unique(drugs.targets$PreferredTerm))
drugs.targets.preferred <- unique(dplyr::select(drugs.targets, PreferredTerm))
drugs.targets.preferred$drugID <- NA
tic("get IDs for drugs")
for(i in 1:nrow(drugs.targets.preferred)) {
print(i)
drugid <- NA
drugSynonym <- as.character(drugs.targets.preferred$PreferredTerm[i])
print(drugSynonym)
## get (onlY) first drug ID
tryCatch({drugid <- names(keggFind(database = "drug", query = drugSynonym))[1]},
error=function(cond) {return(NA)})
if(length(drugid)>0 ) {
print(drugid)
drugs.targets.preferred$drugID[i] <- drugid}
}
toc()
View(drugs.targets.preferred)
