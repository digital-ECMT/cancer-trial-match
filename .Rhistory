names(clinicalDataAllCases)
impactGeneticProfiles <- getGeneticProfiles(mycgds,impactStudyID)
impactGeneticProfiles
alkGenes <- c("ALK", "EGFR", "BRAF", "ROS1")
getProfileData(x=mycgds,genes=mekGenes,geneticProfiles="msk_impact_2017_fusion",caseList="msk_impact_2017_all")
getProfileData(x=mycgds,genes=alkGenes,geneticProfiles="msk_impact_2017_fusion",caseList="msk_impact_2017_all")
getProfileData(x=mycgds,geneticProfiles="msk_impact_2017_fusion",caseList="msk_impact_2017_all")
getProfileData(x=mycgds,genes=alkGenes,geneticProfiles="msk_impact_2017_fusions",caseList="msk_impact_2017_all")
getProfileData(x=mycgds,genes="all",geneticProfiles="msk_impact_2017_fusion",caseList="msk_impact_2017_all")
?getProfileData
getProfileData(x=mycgds,genes="MEK",geneticProfiles=impactGeneticProfiles,caseList="msk_impact_2017_all")
getProfileData(x=mycgds,genes="MEK",geneticProfiles=impactGeneticProfiles$genetic_profile_name,caseList="msk_impact_2017_all")
impactGeneticProfiles$genetic_profile_name
impactGeneticProfiles$genetic_profile_id
getProfileData(x=mycgds,genes="MEK",geneticProfiles=impactGeneticProfiles$genetic_profile_id,caseList="msk_impact_2017_all")
getProfileData(mycgds,'HMGA2',mygeneticprofile,mycaselist)
getProfileData(mycgds, genes = "HMGA2", geneticProfiles = impactGeneticProfiles, caseList = impactCaseList)
getProfileData(mycgds, genes = "HMGA2", geneticProfiles = impactGeneticProfiles, caseList = impactCaseList[1,1])
impactGeneticProfiles
getProfileData(mycgds, genes = "HMGA2", geneticProfiles = impactGeneticProfiles[1,3], caseList = impactCaseList[1,1])
# Get available case lists (collection of samples) for a given cancer study
mycancerstudy = getCancerStudies(mycgds)[2,1]
mycaselist = getCaseLists(mycgds,mycancerstudy)[1,1]
# Get available genetic profiles
mygeneticprofile = getGeneticProfiles(mycgds,mycancerstudy)[1,1]
getProfileData(mycgds,'HMGA2',mygeneticprofile,mycaselist)
mygeneticprofile
mycaselist
getGeneticProfiles(mycgds, impactStudyID)
getGeneticProfiles(mycgds, impactStudyID)[1,1]
mygeneticprofile
getGeneticProfiles(mycgds, impactStudyID)[1,2]
getGeneticProfiles(mycgds, impactStudyID)[1,3]
getGeneticProfiles(mycgds, impactStudyID)[2,1]
myImpactGeneticProfile <- getGeneticProfiles(mycgds, impactStudyID)[2,1]
getProfileData(mycgds, "BRCA2", myImpactGeneticProfile, impactCaseList)
mycaselist
impactCaseList
impactCaseList$case_list_id
mycaselist
mygeneticprofile
impactGeneticProfiles$genetic_profile_id
getProfileData(mycgds, "BRCA2", "msk_impact_2017_all", "msk_impact_2017_mutations")
getProfileData(x = mycgds, genes = "BRCA2", caseList = "msk_impact_2017_all",  geneticProfiles = "msk_impact_2017_mutations")
impactGeneticProfiles$genetic_profile_id
getProfileData(x = mycgds, genes = "MEK", caseList = "msk_impact_2017_all",  geneticProfiles = "msk_impact_2017_mutations")
getProfileData(x = mycgds, genes = "MEK", caseList = "msk_impact_2017_all",  geneticProfiles = "msk_impact_2017_fusion")
names(impactCaseList)
impactCaseList$case_list_id
getProfileData(x = mycgds, genes = "MEK", caseList = "msk_impact_2017_sequenced",  geneticProfiles = "msk_impact_2017_fusion")
names(impactCaseList)
impactCaseList$case_ids[1]
clinicalDataAllCases$subjectId
getProfileData(x = mycgds, genes = "MEK", cases = clinicalDataAllCases$subjectId,  geneticProfiles = "msk_impact_2017_fusion")
getProfileData(x = mycgds, genes = "MEK", caseList = "msk_impact_2017_sequenced",  geneticProfiles = "msk_impact_2017_fusion")
names(impactGeneticProfiles)
dim(impactGeneticProfiles)
impactGeneticProfiles
getProfileData(x = mycgds, genes = "MEK", caseList = "msk_impact_2017_all",  geneticProfiles = "msk_impact_2017_structural_variants")
getProfileData(x = mycgds, genes = "MEK", caseList = "msk_impact_2017_all",  geneticProfiles = c("msk_impact_2017_structural_variants", "msk_impact_2017_mutations"))
getProfileData(x = mycgds, genes = "MEK", caseList = "msk_impact_2017_all",  geneticProfiles = c("msk_impact_2017_structural_variants", "msk_impact_2017_mutations", "msk_impact_2017_fusion"))
getProfileData(x = mycgds, genes = "MEK", caseList = "msk_impact_2017_all",  geneticProfiles = c("msk_impact_2017_structural_variants", "msk_impact_2017_mutations"))
mekProfile <- getProfileData(x = mycgds, genes = "MEK", caseList = "msk_impact_2017_all",  geneticProfiles = c("msk_impact_2017_structural_variants", "msk_impact_2017_mutations"))
dim(mekProfile)
names(mekProfile)
levels(as.factor(mekProfile$msk_impact_2017_structural_variants))
levels(as.factor(mekProfile$msk_impact_2017_mutations))
mekProfile <- getProfileData(x = mycgds, genes = "BRCA2", caseList = "msk_impact_2017_all",  geneticProfiles = c("msk_impact_2017_structural_variants", "msk_impact_2017_mutations"))
levels(as.factor(mekProfile$msk_impact_2017_mutations))
ros1Profile <- getProfileData(x = mycgds, genes = "ROS1", caseList = "msk_impact_2017_all",  geneticProfiles = c("msk_impact_2017_structural_variants", "msk_impact_2017_mutations"))
levels(as.factor(mekProfile$msk_impact_2017_mutations))
levels(as.factor(ros1Profile$msk_impact_2017_mutations))
ros1Profile <- getProfileData(x = mycgds, genes = "ROS1", caseList = "msk_impact_2017_all",  geneticProfiles = c("msk_impact_2017_structural_variants", "msk_impact_2017_mutations"))
levels(as.factor(ros1Profile$msk_impact_2017_structural_variants))
getwd()
untar("msk_impact_2017.tar.gz",list=TRUE)
untar("msk_impact_2017.tar.gz", files = "data_fusions.txt")
data_fusions <- read.csv("data_fusions.txt" )
dim(data_fusions)
names(data_fusions)
head(data_fusions)
data_fusions <- read.table("data_fusions.txt", sep = "\t")
dim(data_fusions)
names(data_fusions)
data_fusions <- read.table("data_fusions.txt", sep = "\t", header = TRUE)
dim(data_fusions)
names(data_fusions)
"ROS1" %in% data_fusions$Hugo_Symbol
head(data_fusions)
download.file(url = "http://download.cbioportal.org/msk_impact_2017.tar.gz", destfile = "msk_impact_2017.tar.gz")
untar("msk_impact_2017.tar.gz", files = "data_fusions.txt")
data_fusions <- read.table("data_fusions.txt", sep = "\t", header = TRUE)
names(data_fusions)
"ALK" %in% data_fusions$Hugo_Symbol
filter(data_fusions, Hugo_Symbol == "ALK")
data_fusions_ALK <- filter(data_fusions, Hugo_Symbol == "ALK")
data_fusions_ALK
dim(data_fusions_ALK)
data_fusions <- read.table("data_fusions.txt", sep = "\t", header = TRUE)
dim(data_fusions)
dim(read.table("data_fusions.txt", sep = "\t", header = TRUE))
dim(read.table("data_fusions.txt", sep = "\t", header = TRUE, fill = FALSE))
dim(read.table("data_fusions.txt", sep = "\t", header = TRUE, quote = ""))
data_fusions <- read.table("data_fusions.txt", sep = "\t", header = TRUE, quote = "")
head(data_fusions)
data_fusions_ALK <- filter(data_fusions, Hugo_Symbol == "ALK")
dim(data_fusions_ALK)
names(data_fusions_ALK)
## specify which genes to include
alkGenes <- c("ALK", "EGFR", "BRAF", "ROS1")
## get copy number alteration data
impactALKcna <- getProfileData(x=mycgds,genes=alkGenes,geneticProfiles="msk_impact_2017_cna",caseList="msk_impact_2017_all")
## append "cna" to column names
colnames(impactALKcna) <- paste(colnames(impactALKcna), "cna", sep = "_")
## add a column to hold subject identifiers
impactALKcna$subjectId <- rownames(impactALKcna)
## get rid of row names
rownames(impactALKcna) <- c()
dim(impactALKcna)
names(impactALKcna)
## get mutation data for ALK
impactALKmutations <- getProfileData(x=mycgds,genes=alkGenes,geneticProfiles="msk_impact_2017_mutations",caseList="msk_impact_2017_all")
## append "mutations" to column names
colnames(impactALKmutations) <- paste(colnames(impactALKmutations), "mutations", sep = "_")
## replace NaN with NA
impactALKmutations[impactALKmutations=="NaN"] <- NA
## add a column to hold subject identifiers
impactALKmutations$subjectId <- rownames(impactALKmutations)
## get rid of row names
rownames(impactALKmutations) <- c()
dim(data_fusions)
names(data_fusions)
head(data_fusions_ALK)
names(impactALKmutations)
head(impactALKmutations$subjectId)
head(data_fusions_ALK$Tumor_Sample_Barcode)
data_fusions$Tumor_Sample_Barcode <- gsub(pattern = "-", replacement = "-", x=data_fusions$Tumor_Sample_Barcode)
head(data_fusions_ALK$Tumor_Sample_Barcode)
data_fusions$Tumor_Sample_Barcode <- gsub(pattern = "-", replacement = ".", x=data_fusions$Tumor_Sample_Barcode)
head(data_fusions_ALK$Tumor_Sample_Barcode)
data_fusions$Tumor_Sample_Barcode[1]
data_fusions$Tumor_Sample_Barcode <- gsub(pattern = "-", replacement = ".", x=data_fusions$Tumor_Sample_Barcode)
class(data_fusions$Tumor_Sample_Barcode)
data_fusions_ALK <- filter(data_fusions, Hugo_Symbol == "ALK")
head(data_fusions_ALK$Tumor_Sample_Barcode)
head(impactALKmutations$subjectId)
head(impactALKcna$subjectId)
names(impactALKmutations)
head(data_fusions_ALK)
data_fusions_ALK <- select(data_fusions_ALK, subjectId = "Tumor_Sample_Barcode", ALK_fusion = "Fusion")
head(data_fusions_ALK)
## join to table of mutations
impactALKFull <- merge(x=clinicalDataAllCases, y=impactALKmutations)
## join to table of copy number alterations
impactALKFull <- merge(x=impactALKFull, y=impactALKcna)
## join to table of ALK fusions
impactALKFull <- merge(x=impactALKFull, y=data_fusions_ALK)
## select columns of interest
impactALKselected <- select(impactALKFull, subjectId, CANCER_TYPE, OS_MONTHS, ALK_mutations, ALK_cna, BRAF_mutations,EGFR_mutations,ROS1_mutations)
head(impactALKselected)
## join to table of mutations
impactALKFull <- merge(x=clinicalDataAllCases, y=impactALKmutations)
## join to table of copy number alterations
impactALKFull <- merge(x=impactALKFull, y=impactALKcna)
## join to table of ALK fusions
impactALKFull <- merge(x=impactALKFull, y=data_fusions_ALK)
names(impactALKFull)
## select columns of interest
impactALKselected <- select(impactALKFull, subjectId, CANCER_TYPE, OS_MONTHS, ALK_mutations, ALK_cna, ALK_fusion, BRAF_mutations,EGFR_mutations,ROS1_mutations)
head(impactALKselected)
dim(impactALKselected)
## join to table of mutations
impactALKFull <- merge(x=clinicalDataAllCases, y=impactALKmutations)
## join to table of copy number alterations
impactALKFull <- merge(x=impactALKFull, y=impactALKcna)
## join to table of ALK fusions
impactALKFull <- merge(x=impactALKFull, y=data_fusions_ALK)
## select columns of interest
impactALKselected <- select(impactALKFull, subjectId, CANCER_TYPE, OS_MONTHS, ALK_mutations, ALK_fusion, ALK_cna, BRAF_mutations, EGFR_mutations,ROS1_mutations)
impactALKselected
View(impactALKselected)
library(ggplot2)
qplot(CANCER_TYPE, data = impactALKselected)
qplot(CANCER_TYPE, OS_MONTHS, data = impactALKselected)
qplot(ALK_FUSION, OS_MONTHS, data = impactALKselected)
qplot(ALK_fusion, OS_MONTHS, data = impactALKselected)
ggplot(summary , aes(fill=variable, y=value, x=label)) +
geom_bar(position="stack", stat="identity") +
coord_flip() +
scale_fill_manual(values = dECMTpalette) +
theme_minimal() +
labs(title = "Prevalence of selected genotypes according to cancer type,\nMSK IMPACT study", x = "Tumour type", y = "Prevalence, %") +
theme(axis.text.x = element_text(size=10))
library(ggplot2)
ggplot(summary , aes(fill=variable, y=value, x=label)) +
geom_bar(position="stack", stat="identity") +
coord_flip() +
scale_fill_manual(values = dECMTpalette) +
theme_minimal() +
labs(title = "Prevalence of selected genotypes according to cancer type,\nMSK IMPACT study", x = "Tumour type", y = "Prevalence, %") +
theme(axis.text.x = element_text(size=10))
twinkle <- read.table(file = "twinkleResults_20 May 2020.tsv", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
twinkle <- read.table(file = "twinkleResults_20 May 2020.tsv", header = TRUE, stringsAsFactors = FALSE, sep = "\t", quote = "\"")
dim(twinkle)
names(twinkle)
library(ggplot2)
qplot(x=twinkle$sentiment, y=twinkle$meanNeutral)
qplot(x=twinkle$sentiment, y=twinkle$meanAnger)
qplot(x=twinkle$sentiment, y=twinkle$meanHappiness)
qplot(x=twinkle$sentiment, y=twinkle$meanSurprise)
qplot(x=twinkle$sentiment, y=twinkle$meanSadness)
qplot(x=twinkle$sentiment, y=twinkle$meanDisgust)
qplot(x=twinkle$sentiment, y=twinkle$meanFear)
qplot(x=twinkle$sentiment, y=twinkle$meanContempt)
qplot(x=twinkle$sentiment)
qplot(x=twinkle$meanAnger)
pairs(twinkle)
results <- read.csv(file = "standardI2Eresults.csv", stringsAsFactors = FALSE, header = TRUE)
dim(results)
names(results)
levels(as.factor(results$Mutations.in...))
library(dplyr)
"NCT03568656" %in% results$Doc
filter(results, Doc=="NCT03568656")
results[Doc=="NCT03568656", "Mutations.in...")
results[results$Doc=="NCT03568656", "Mutations.in...")
results[Doc=="NCT03568656", "Mutations.in..."]
results[results$Doc=="NCT03568656", "Mutations.in..."]
results[results$Doc=="NCT03260322", "Mutations.in..."]
results[results$Doc=="NCT03093116", "Mutations.in..."]
results[results$Doc=="NCT02568267", "Mutations.in..."]
results[results$Doc=="NCT02568267", "Individual.Criteria"]
rmarkdown::render("UHS_COVID_SHINY_test.Rmd")
if(file.exists("REACT_COVID_Demographics.csv")) {
demographics <- read.csv(file = "REACT_COVID_Demographics.csv", stringsAsFactors = FALSE, header = TRUE)
} else demographics <- read.csv(file = "REACT_COVID_Demographics_synthetic.csv", stringsAsFactors = FALSE, header = TRUE)
if(file.exists("REACT_Events.csv")) {
events <- read.csv(file = "REACT_Events.csv", stringsAsFactors = FALSE, header = TRUE)
} else events <- read.csv(file = "REACT_Events_synthetic.csv", stringsAsFactors = FALSE, header = TRUE)
if(file.exists("REACT_Vitalsigns_Numeric.csv")) {
vitalsigns_Numeric <- read.csv(file = "REACT_Vitalsigns_Numeric.csv", stringsAsFactors = FALSE, header = TRUE)
} else vitalsigns_Numeric <- read.csv(file = "REACT_Vitalsigns_Numeric_synthetic.csv", stringsAsFactors = FALSE, header = TRUE)
head(demographics$STUDY_ID)
head(events$STUDY_ID)
head(vitalsigns_Numeric$STUDY_ID)
## add an age group column
demographics$age_group <- cut(demographics$PATIENT_AGE, breaks = c(0,10,20,30,40,50,60,70,80,90))
## convert gender values from M and F to Male and Female
demographics$GENDER <- gsub(pattern = "M", replacement = "Male", x=demographics$GENDER)
demographics$GENDER <- gsub(pattern = "F", replacement = "Female", x=demographics$GENDER)
events_wide <- dcast(data = events, formula = STUDY_ID ~ EVENT_TYPE, value.var = "START_DATE")
View(events_wide)
head(events)
dcast(data = events, formula = STUDY_ID ~ EVENT_TYPE, value.var = "START_DATE")
events_wide <- dcast(data = events, formula = STUDY_ID ~ EVENT_TYPE, value.var = "START_DATE")
levels(as.factor(events_wide$ADMISSION))
levels(as.factor(events_wide$COVID_FIRST_POSITIVE))
levels(as.factor(events_wide$`INVASIVE VENTILATION`))
levels(as.factor(events_wide$ITU))
levels(as.factor(events_wide$NIV))
names(demographics)
dcast(data = events, formula = STUDY_ID ~ EVENT_TYPE, value.var = "START_DATE", fun.aggregate = paste)
dcast(data = events, formula = STUDY_ID ~ EVENT_TYPE, value.var = "START_DATE", fun.aggregate = paste())
dcast(data = events, formula = STUDY_ID ~ EVENT_TYPE, value.var = "START_DATE", fun.aggregate = =function(x) paste(x, collapse = ", "))
dcast(data = events, formula = STUDY_ID ~ EVENT_TYPE, value.var = "START_DATE", fun.aggregate = function(x) paste(x, collapse = ", "))
class(events$START_DATE)
events[order(events$START_DATE), ]
events[order(as.Date(events$START_DATE)), ]
events[order(as.Date(events$START_DATETIME)), ]
events <- events[order(as.Date(events$START_DATETIME)), ]
dcast(data = events, formula = STUDY_ID ~ EVENT_TYPE, value.var = "START_DATE")
dcast(data = events, formula = STUDY_ID ~ EVENT_TYPE, value.var = "START_DATE", fun.aggregate = function(x) paste(x, collapse = ", "))
events_wide <- dcast(data = events, formula = STUDY_ID ~ EVENT_TYPE, value.var = "START_DATE", fun.aggregate = function(x) paste(x, collapse = ", "))
names(events_wide)
gsub(pattern = ",.*", replacement = "", x=events_wide)
gsub(pattern = ",*.", replacement = "", x=events_wide)
gsub(pattern = ",.*", replacement = "", x=events_wide)
gsub(pattern = ",.*", replacement = "", x=events_wide$ADMISSION)
gsub(pattern = ",.*", replacement = "", x=events_wide$ITU)
?gsub
gsub(pattern = ",.*", replacement = "", x=events_wide[,6])
for(i in 1:ncol(events_wide)) {
events_wide[,i] <- gsub(pattern = ",.*", replacement = "", x=events_wide[,i])
}
View(events_vitals_wide)
View(vitalsNum_wide)
vitalsNum_wide[is.nan(vitalsNum_wide)] <- NA
is.nan(vitalsNum_wide)
is.nan(vitalsNum_wide$ABL835_FiO2)
for(i in 1:ncol(vitalsNum_wide)) {
is.nan(vitalsNum_wide[,i]) <- NA
}
is.nan(vitalsNum_wide[,5])
is.nan(vitalsNum_wide[,3])
for(i in 1:ncol(vitalsNum_wide)) {
vitalsNum_wide[is.nan(vitalsNum_wide[,i]), i] <- NA
}
min(events_vitals_wide$ABL835_FiO2)
max(events_vitals_wide$ABL835_FiO2)
## cast vitalSigns_Numeric into wide format
vitalsNum_wide <- dcast(data = vitalsigns_Numeric, formula = STUDY_ID + RECORDED_DATE ~ PARAMETER , value.var = "VALUE", fun.aggregate = mean)
# note that multiple values per subject per day are represented as a single mean value
# names = "STUDY_ID, RECORDED_DATE, *Core temperature, *Diastolic blood pressure, *Heart rate, *Respiration rate, *Skin temperature, *Systolic blood pressure, ABL835_FiO2, Positive End Expiratory Pressure, Tidal Volume Expiratory"
## need to deal with NaN (where some values were not recorded on a given date, so could not calculate a mean)
## replace NaN values with NAs
for(i in 1:ncol(vitalsNum_wide)) {
vitalsNum_wide[is.nan(vitalsNum_wide[,i]), i] <- NA
}
## merge into one wide table
events_vitals_wide <- merge(x=demographics, y=events_wide)
events_vitals_wide <- merge(x=events_vitals_wide, y=vitalsNum_wide)
min(events_vitals_wide$ABL835_FiO2)
max(events_vitals_wide$ABL835_FiO2)
events_vitals_wide$ABL835_FiO2
class(events_vitals_wide$ABL835_FiO2)
rm(list = ls())
prodFilepath <- "C:/Users/O’ReganPaul/Downloads"
demographics <- read.csv(file = paste(prodFilepath,"REACT_COVID_Demographics.csv", sep = "/"), stringsAsFactors = FALSE, header = TRUE)
max(demographics$BMI)
vitalsigns_Numeric <- read.csv(file = paste(prodFilepath, "REACT_Vitalsigns_Numeric.csv", sep = "/"), stringsAsFactors = FALSE, header = TRUE)
localFilepath <-"C:/Users/O’ReganPaul/Downloads"
vitalsigns_Numeric <- read.csv(file = paste(localFilepath, "REACT_Vitalsigns_Numeric.csv", sep = "/"), stringsAsFactors = FALSE, header = TRUE)
str(vitalsigns_Numeric)
library(dplyr)
filter(vitalsigns_Numeric, PARAMETER=="pO2_FiO2")
filter(vitalsigns_Numeric, PARAMETER=="pO2_FiO2")$VALUE
qplot(filter(vitalsigns_Numeric, PARAMETER=="pO2_FiO2")$VALUE)
library(ggplot2)
qplot(filter(vitalsigns_Numeric, PARAMETER=="pO2_FiO2")$VALUE)
max(filter(vitalsigns_Numeric, PARAMETER=="pO2_FiO2")$VALUE)
filter(vitalsigns_Numeric, PARAMETER=="pO2_FiO2" && VALUE>100)
filter(vitalsigns_Numeric, PARAMETER=="pO2_FiO2" & VALUE>100)
mean(filter(vitalsigns_Numeric, PARAMETER=="pO2_FiO2")$VALUE)
filter(vitalsigns_Numeric, PARAMETER=="pO2_FiO2" & VALUE>2000)
levels(as.factor(vitalsigns_Numeric$PARAMETER))
filter(vitalsigns_Numeric, PARAMETER %in% c("pO2_FiO2", "ABL835_FiO2","ABL835_pO2") & STUDY_ID %in% c("UHSCOVID_38ff5206","UHSCOVID_574066a4","UHSCOVID_61bc87c0" )
filter(vitalsigns_Numeric, PARAMETER %in% c("pO2_FiO2", "ABL835_FiO2","ABL835_pO2") & STUDY_ID %in% c("UHSCOVID_38ff5206","UHSCOVID_574066a4","UHSCOVID_61bc87c0" ))
nrow(filter(vitalsigns_Numeric, PARAMETER %in% c("pO2_FiO2", "ABL835_FiO2","ABL835_pO2") & STUDY_ID %in% c("UHSCOVID_38ff5206","UHSCOVID_574066a4","UHSCOVID_61bc87c0" )))
nrow(filter(vitalsigns_Numeric, PARAMETER == "pO2_FiO2"))
filter(vitalsigns_Numeric, PARAMETER == "pO2_FiO2")
rm(list = ls())
getwd()
proactFinal <- read.csv(file = "finalOncology_06 May 2020.csv", header = TRUE)
View(proactFinal)
length(unique(proactFinal$Full.transcript))
rm(proactFinal)
plot(cars)
rmarkdown::render(salivary_cancers.Rmd)
rmarkdown::render("salivary_cancers.Rmd")
rmarkdown::render("salivary_cancers.Rmd")
View(salivary.studies)
rmarkdown::render("salivary_cancers.Rmd")
View(salivary.studies)
rmarkdown::render("salivary_cancers.Rmd")
View(salivary.studies)
length(unique(salivary.studies$nct_id))
rmarkdown::render("salivary_cancers.Rmd")
rmarkdown::render("salivary_cancers.Rmd")
rmarkdown::render("salivary_cancers.Rmd")
# second, split on space or slash
salivary.studies$words <- strsplit(x=salivary.studies$substring, split = " |/")
#eligibilities$words <- strsplit(x=eligibilities$substring, split = " ")
# # third, unnest to multiply rows
salivary.studies <- unnest(data = salivary.studies, cols = words)
# # finally, convert back to data frame
salivary.studies <- as.data.frame(salivary.studies)
humanGeneMatches <- humanGenes[humanGenes$Aliases %in% salivary.studies$words, ]
humanGeneMatches <- unique(humanGeneMatches)
humanGeneMatches
matchesTable <- data.frame(nct_id = character(0),
matching.substring = character(0),
matching.alias = character(0),
matching.symbol = character(0))
for(i in 1:nrow(humanGeneMatches)) {
alias <- humanGeneMatches$Aliases[i]
symbol <- humanGeneMatches$Symbol[i]
## get indices
indices <- grep(pattern = alias, x = salivary.studies$substring, ignore.case = FALSE)
## get NCT IDs
nct_ids <- salivary.studies$nct_id[indices]
## get matching substrings
matching.substring <- salivary.studies$substring[indices]
matchesTable <- matchesTable %>% add_row(nct_id=nct_ids, matching.substring = matching.substring, matching.alias=alias, matching.symbol=symbol)
## now look for additional matches like "BRCA2" against "BRCA1/2"
more.indices <- grep(pattern = alias, x = gsub(pattern = "./", replacement = "",x=salivary.studies$substring), ignore.case = FALSE)
if(length(more.indices)>0) {
## get NCT IDs
more.nct_ids <- salivary.studies$nct_id[more.indices]
## get matching substrings
more.matching.substring <- salivary.studies$substring[more.indices]
matchesTable <- matchesTable %>% add_row(nct_id=more.nct_ids, matching.substring = more.matching.substring, matching.alias=alias, matching.symbol=symbol)
}
}
View(matchesTable)
filter(matchesTable, matching.alias != "not")
dim(matchesTable)
matchesTable <- filter(matchesTable, matching.alias != "not")
dim(matchesTable)
merge(x=salivary.studies, y=matchesTable, by.x = c("nct_id", "substring"), by.y=c("nct_id", "matching.substring"))
salivary.studies <- merge(x=salivary.studies, y=matchesTable, by.x = c("nct_id", "substring"), by.y=c("nct_id", "matching.substring"))
names(salivary.studies)
## select columns of interest
salivary.studies <- dplyr::select(salivary.studies, nct_id, official_title, sites, start_date, completion_date, cancer_types, matching.symbol, matching.alias, eligibility_criteria)
## remove duplicated rows
salivary.studies <- unique(salivary.studies)
rmarkdown::render("salivary_cancers.Rmd")
filter(matchesTable, nchar(matching.alias) <2)
class(matchesTable$matching.alias)
matchesTable$matching.alias <- as.character(matchesTable$matching.alias)
filter(matchesTable, nchar(matching.alias) <2)
filter(matchesTable, nchar(matching.alias) >1 )
rmarkdown::render("salivary_cancers.Rmd")
rmarkdown::render("salivary_cancers.Rmd")
strsplit(x="a bunch of words, separated by (parentheses)", split = " |/|,|(|)")
strsplit(x="a bunch of words, separated by (parentheses)", split = " |/|,|\(|\)")
strsplit(x="a bunch of words, separated by (parentheses)", split = " |/|,|\\(|\\)")
rmarkdown::render("salivary_cancers.Rmd")
rmarkdown::render("salivary_cancers.Rmd")
"FGFR" %in% humanGenes$Aliases
rmarkdown::render("salivary_cancers.Rmd")
install.packages("xlsx")
?write.xlsx
library(xlsx)
?write.xlsx
rmarkdown::render("salivary_cancers.Rmd")
library(xlsx)
?write.table
install.packages("xlsx")
library(xlsx)
install.packages("xlsx")
library(xlsx)
install.packages("openxlsx")
library(openxlsx)
write.xlsx(x=salivary.studies, file = "salivary_studies_all.xlsx", sheetName = "Sheet1", col.names = TRUE, row.names = FALSE, append = FALSE)
write.xlsx(x=salivary.studies, file = "test.xlsx", col.names = TRUE, row.names = FALSE, append = FALSE)
?write.xlsx
write.xlsx(x=salivary.studies, file = "test.xlsx")
install.packages("zip")
install.packages("zip")
install.packages("ggplot2")
library(zip)
write.xlsx(x=salivary.studies, file = "test.xlsx")
library(openxlsx)
write.xlsx(x=salivary.studies, file = "test.xlsx")
rmarkdown::render("salivary_cancers.Rmd")
write.xlsx(x=salivary.studies, file = "test.xlsx")
library(zip)
write.xlsx(x=salivary.studies, file = "test.xlsx")
rmarkdown::render("salivary_cancers.Rmd")
rmarkdown::render("salivary_cancers.Rmd")
write.table(salivary.studies.all, file = "salivary_studies_all.tsv", sep = "\t",
row.names = FALSE, col.names = names(salivary.studies))
salivary.studies.all$eligibility_criteria[1]
write.csv(salivary.studies.all, file = "salivary_studies_all.csv"row.names = FALSE)
write.csv(salivary.studies.all, file = "salivary_studies_all.csv", row.names = FALSE)
rmarkdown::render("salivary_cancers.Rmd")
salivary.studies$eligibility_criteria[8]
gsub(pattern = "[^a-zA-Z0-9]", replacement = "", x= salivary.studies$eligibility_criteria[8])
gsub(pattern = "[a-zA-Z0-9]", replacement = "", x= salivary.studies$eligibility_criteria[8])
gsub(pattern = "[^a-zA-Z0-9]", replacement = "", x= salivary.studies$eligibility_criteria[8])
gsub(pattern = "^(.*?)[a-zA-Z0-9]", replacement = "", x= salivary.studies$eligibility_criteria[8])
gsub(pattern = "^(.*?)[^a-zA-Z0-9]", replacement = "", x= salivary.studies$eligibility_criteria[8])
salivary.studies$eligibility_criteria.trimmed <- gsub(pattern = "^(.*?)[^a-zA-Z0-9]", replacement = "", x= salivary.studies$eligibility_criteria)
salivary.studies$eligibility_criteria.trimmed <- gsub(pattern = "[^a-zA-Z0-9?]", replacement = "", x= salivary.studies$eligibility_criteria)
gsub(pattern = "^(.*?)[^a-zA-Z0-9]", replacement = "", x= salivary.studies$eligibility_criteria[8])
gsub(pattern = "[^a-zA-Z0-9]", replacement = "", x= salivary.studies$eligibility_criteria[8])
?gsub
sub(pattern = "[^a-zA-Z0-9]", replacement = "", x= salivary.studies$eligibility_criteria[8])
salivary.studies$eligibility_criteria.trimmed <- sub(pattern = "[^a-zA-Z0-9?]", replacement = "", x= salivary.studies$eligibility_criteria)
sub(pattern = "[^a-zA-Z0-9]", replacement = "", x= salivary.studies$eligibility_criteria[8])
sub(pattern = "^[^a-zA-Z0-9]", replacement = "", x= salivary.studies$eligibility_criteria[8])
salivary.studies$eligibility_criteria.trimmed <- sub(pattern = "^[^a-zA-Z0-9?]", replacement = "", x= salivary.studies$eligibility_criteria)
sub(pattern = "^[^a-zA-Z0-9?]", replacement = "", x= salivary.studies.all$eligibility_criteria)
salivary.studies.all$eligibility_criteria.trimmed <- sub(pattern = "^[^a-zA-Z0-9?]", replacement = "", x= salivary.studies.all$eligibility_criteria)
View(salivary.studies.all)
rmarkdown::render("salivary_cancers.Rmd")
rmarkdown::render("salivary_cancers.Rmd")
rmarkdown::render("salivary_cancers.Rmd")
38+51+1
107+258+6+2
197/460
exp(0.73)
exp(0.064)
exp(1.416)
rm(list=ls())
?rename
library(dplyr)
?rename
1367+2377+2063
79/5807
299*35+1794
278*35+2508
260*35+3131
322*35+968
347*36
283*35+2554
328*35+985
304*35+1827
328*35+985
localFilepath <-"C:/Users/O’ReganPaul/Downloads"
read.csv(file = paste(localFilepath,"REACT_pharmacy_15Jan21.csv", sep = "/"), stringsAsFactors = FALSE, header = TRUE)
pharmacy <- read.csv(file = paste(localFilepath,"REACT_PharmacData_15Jan21.csv", sep = "/"), stringsAsFactors = FALSE, header = TRUE)
pharmacy <- read.csv(file = paste(localFilepath,"REACT_PharmacyData_15Jan21.csv", sep = "/"), stringsAsFactors = FALSE, header = TRUE)
unique(pharmacy$DRUGDESCRIPTION)
grep(pattern = "DEXAM", x=pharmacy$DRUGDESCRIPTION)
unique(pharmacy$STUDY_ID[grep(pattern = "DEXAM", x=pharmacy$DRUGDESCRIPTION)])
length(unique(pharmacy$STUDY_ID[grep(pattern = "DEXAM", x=pharmacy$DRUGDESCRIPTION)]))
getwd()
setwd("GitHub/cancer-trial-match")
rmarkdown::render("trialMatchDataRefresh.Rmd")
rmarkdown::render("trialMatchDataRefresh.Rmd")
rmarkdown::render("trialMatchDataRefresh.Rmd")
